
msgid ""
msgstr ""
"Project-Id-Version:SpinalHDL"
"Report-Msgid-Bugs-To:"
"POT-Creation-Date:2023-12-01 11:48+0800"
"PO-Revision-Date:YEAR-MO-DA HO:MI+ZONE"
"Last-Translator:FULL NAME <EMAIL@ADDRESS>"
"Language:zh_CN"
"Language-Team:zh_CN <LL@li.org>"
"Plural-Forms:nplurals=1; plural=0;"
"MIME-Version:1.0"
"Content-Type:text/plain; charset=utf-8"
"Content-Transfer-Encoding:8bit"
"Generated-By:Babel 2.13.1"

#: ../../source/SpinalHDL/Libraries/utils.rst:5
msgid "Utils"
msgstr "实用程序"
#: ../../source/SpinalHDL/Libraries/utils.rst:7
msgid "Some utils are also present in :ref:`spinal.core <utils>`"
msgstr "一些实用程序也存在于 :ref:`spinal.core <utils>` 中"
#: ../../source/SpinalHDL/Libraries/utils.rst:10
msgid "State less utilities"
msgstr "无状态公用事业"
#: ../../source/SpinalHDL/Libraries/utils.rst:16
#: ../../source/SpinalHDL/Libraries/utils.rst:83
#: ../../source/SpinalHDL/Libraries/utils.rst:216
msgid "Syntax"
msgstr "句法"
#: ../../source/SpinalHDL/Libraries/utils.rst:17
#: ../../source/SpinalHDL/Libraries/utils.rst:84
#: ../../source/SpinalHDL/Libraries/utils.rst:217
msgid "Return"
msgstr "返回"
#: ../../source/SpinalHDL/Libraries/utils.rst:18
#: ../../source/SpinalHDL/Libraries/utils.rst:85
#: ../../source/SpinalHDL/Libraries/utils.rst:189
#: ../../source/SpinalHDL/Libraries/utils.rst:218
msgid "Description"
msgstr "描述"
#: ../../source/SpinalHDL/Libraries/utils.rst:19
msgid "toGray(x : UInt)"
msgstr "tiGray(x：UInt)"
#: ../../source/SpinalHDL/Libraries/utils.rst:20
#: ../../source/SpinalHDL/Libraries/utils.rst:44
#: ../../source/SpinalHDL/Libraries/utils.rst:47
#: ../../source/SpinalHDL/Libraries/utils.rst:53
msgid "Bits"
msgstr "位"
#: ../../source/SpinalHDL/Libraries/utils.rst:21
msgid "Return the gray value converted from ``x`` (UInt)"
msgstr "返回从 ``x`` (UInt) 转换而来的灰度值"
#: ../../source/SpinalHDL/Libraries/utils.rst:22
msgid "fromGray(x : Bits)"
msgstr "fromGray(x : 位)"
#: ../../source/SpinalHDL/Libraries/utils.rst:23
#: ../../source/SpinalHDL/Libraries/utils.rst:30
#: ../../source/SpinalHDL/Libraries/utils.rst:34
msgid "UInt"
msgstr "单位"
#: ../../source/SpinalHDL/Libraries/utils.rst:24
msgid "Return the UInt value converted value from ``x`` (gray)"
msgstr "返回从``x``（灰色）转换而来的UInt值"
#: ../../source/SpinalHDL/Libraries/utils.rst:25
msgid "Reverse(x : T)"
msgstr "反转（x：T）"
#: ../../source/SpinalHDL/Libraries/utils.rst:26
#: ../../source/SpinalHDL/Libraries/utils.rst:41
#: ../../source/SpinalHDL/Libraries/utils.rst:61
#: ../../source/SpinalHDL/Libraries/utils.rst:67
#: ../../source/SpinalHDL/Libraries/utils.rst:72
#: ../../source/SpinalHDL/Libraries/utils.rst:87
#: ../../source/SpinalHDL/Libraries/utils.rst:95
msgid "T"
msgstr "时间"
#: ../../source/SpinalHDL/Libraries/utils.rst:27
msgid "Flip all bits (lsb + n -> msb - n)"
msgstr "翻转所有位 (lsb + n -> msb - n)"
#: ../../source/SpinalHDL/Libraries/utils.rst
msgid "OHToUInt(x : Seq[Bool])"
msgstr "OHToUInt(x : Seq[布尔])"
#: ../../source/SpinalHDL/Libraries/utils.rst
msgid "OHToUInt(x : BitVector)"
msgstr "OHToUInt(x：位向量)"
#: ../../source/SpinalHDL/Libraries/utils.rst:31
msgid "Return the index of the single bit set (one hot) in ``x``"
msgstr "返回``x``中单个位集（一个热）的索引"
#: ../../source/SpinalHDL/Libraries/utils.rst
msgid "CountOne(x : Seq[Bool])"
msgstr "CountOne(x : Seq[Bool])"
#: ../../source/SpinalHDL/Libraries/utils.rst
msgid "CountOne(x : BitVector)"
msgstr "CountOne(x：位向量)"
#: ../../source/SpinalHDL/Libraries/utils.rst:35
msgid "Return the number of bit set in ``x``"
msgstr "返回“x”中设置的位数"
#: ../../source/SpinalHDL/Libraries/utils.rst
msgid "MajorityVote(x : Seq[Bool])"
msgstr "多数投票（x：Seq[Bool]）"
#: ../../source/SpinalHDL/Libraries/utils.rst
msgid "MajorityVote(x : BitVector)"
msgstr "多数投票（x：位向量）"
#: ../../source/SpinalHDL/Libraries/utils.rst:38
#: ../../source/SpinalHDL/Libraries/utils.rst:191
msgid "Bool"
msgstr "布尔"
#: ../../source/SpinalHDL/Libraries/utils.rst:39
msgid "Return True if the number of bit set is > x.size / 2"
msgstr "如果设置的位数 > x.size / 2，则返回 True"
#: ../../source/SpinalHDL/Libraries/utils.rst:40
msgid "EndiannessSwap(that: T[, base:BitCount])"
msgstr "EndiannessSwap（即：T[，基数：BitCount]）"
#: ../../source/SpinalHDL/Libraries/utils.rst:42
msgid "Big-Endian <-> Little-Endian"
msgstr "大端 <-> 小端"
#: ../../source/SpinalHDL/Libraries/utils.rst:43
msgid "OHMasking.first(x : Bits)"
msgstr "OHMasking.first(x：位)"
#: ../../source/SpinalHDL/Libraries/utils.rst:45
msgid "Apply a mask on x to only keep the first bit set"
msgstr "对 x 应用掩码以仅保留第一位设置"
#: ../../source/SpinalHDL/Libraries/utils.rst:46
msgid "OHMasking.last(x : Bits)"
msgstr "OHMasking.last（x：位）"
#: ../../source/SpinalHDL/Libraries/utils.rst:48
msgid "Apply a mask on x to only keep the last bit set"
msgstr "对 x 应用掩码以仅保留最后一位设置"
#: ../../source/SpinalHDL/Libraries/utils.rst
msgid "OHMasking.roundRobin("
msgstr "OHMasking.roundRobin("
#: ../../source/SpinalHDL/Libraries/utils.rst
msgid "requests : Bits,"
msgstr "请求：位，"
#: ../../source/SpinalHDL/Libraries/utils.rst
msgid "ohPriority : Bits"
msgstr "oh优先级：位"
#: ../../source/SpinalHDL/Libraries/utils.rst
msgid ")"
msgstr "）"
#: ../../source/SpinalHDL/Libraries/utils.rst
msgid "Apply a mask on x to only keep the bit set from ``requests``."
msgstr "对 x 应用掩码以仅保留“请求”中设置的位。"
#: ../../source/SpinalHDL/Libraries/utils.rst
msgid "it start looking in ``requests`` from the ``ohPriority`` position."
msgstr "它开始从“ohPriority”位置查找“requests”。"
#: ../../source/SpinalHDL/Libraries/utils.rst
msgid ""
"For example if ``requests`` is \"1001\" and ``ohPriority`` is \"0010\", the "
"``roundRobin`` function will start looking in `requests` from its second bit"
" and will return \"1000\"."
msgstr ""
"例如，如果“requests”为“1001”且“ohPriority”为“0010”，则“roundRobin”函数将从第二位开始查找“requests”并返回“"
" 1000”。"
#: ../../source/SpinalHDL/Libraries/utils.rst
msgid "MuxOH ("
msgstr "穆克斯OH ("
#: ../../source/SpinalHDL/Libraries/utils.rst
msgid "oneHot : IndexedSeq[Bool],"
msgstr "oneHot : IndexedSeq[Bool],"
#: ../../source/SpinalHDL/Libraries/utils.rst
msgid "inputs : Iterable[T]"
msgstr "输入：可迭代[T]"
#: ../../source/SpinalHDL/Libraries/utils.rst:62
msgid ""
"Returns the muxed ``T`` from the ``inputs`` based on the ``oneHot`` vector."
msgstr "基于“oneHot”向量从“inputs”返回混合的“T”。"
#: ../../source/SpinalHDL/Libraries/utils.rst
msgid "PriorityMux ("
msgstr "优先复用器 ("
#: ../../source/SpinalHDL/Libraries/utils.rst
msgid "sel: Seq[Bool],"
msgstr "sel: 序列[布尔],"
#: ../../source/SpinalHDL/Libraries/utils.rst
msgid "in:  Seq[T]"
msgstr "在：序列[T]"
#: ../../source/SpinalHDL/Libraries/utils.rst:68
#: ../../source/SpinalHDL/Libraries/utils.rst:73
msgid "Return the first ``in`` element whose ``sel`` is ``True``."
msgstr "返回第一个 sel 为 True 的 in 元素。"
#: ../../source/SpinalHDL/Libraries/utils.rst
msgid "in:  Seq[(Bool, T)]"
msgstr "在：Seq[(Bool, T)]"
#: ../../source/SpinalHDL/Libraries/utils.rst:77
msgid "State full utilities"
msgstr "国家公用事业齐全"
#: ../../source/SpinalHDL/Libraries/utils.rst:86
msgid "Delay(that: T, cycleCount: Int)"
msgstr "延迟（即：T，cycleCount：Int）"
#: ../../source/SpinalHDL/Libraries/utils.rst:88
msgid "Return ``that`` delayed by ``cycleCount`` cycles"
msgstr "返回延迟了“cycleCount”周期的“that”"
#: ../../source/SpinalHDL/Libraries/utils.rst:89
msgid "History(that: T, length: Int[,when : Bool])"
msgstr "历史记录（即：T，长度：Int[，当：Bool]）"
#: ../../source/SpinalHDL/Libraries/utils.rst:90
msgid "List[T]"
msgstr "列表[T]"
#: ../../source/SpinalHDL/Libraries/utils.rst
msgid "Return a Vec of ``length`` elements"
msgstr "返回“length”元素的 Vec"
#: ../../source/SpinalHDL/Libraries/utils.rst
msgid ""
"The first element is ``that``\\ , the last one is ``that`` delayed by "
"``length``\\ -1\\"
msgstr "第一个元素是 ``that``\\ ，最后一个元素是 ``that`` 延迟了 ``length``\\ -1\\"
#: ../../source/SpinalHDL/Libraries/utils.rst
msgid "The internal shift register sample when ``when`` is asserted"
msgstr "当“when”被置位时的内部移位寄存器样本"
#: ../../source/SpinalHDL/Libraries/utils.rst:94
msgid "BufferCC(input : T)"
msgstr "BufferCC（输入：T）"
#: ../../source/SpinalHDL/Libraries/utils.rst:96
msgid ""
"Return the input signal synchronized with the current clock domain by using "
"2 flip flop"
msgstr "使用2个触发器返回与当前时钟域同步的输入信号"
#: ../../source/SpinalHDL/Libraries/utils.rst:100
msgid "Counter"
msgstr "柜台"
#: ../../source/SpinalHDL/Libraries/utils.rst:102
msgid "The Counter tool can be used to easily instantiate a hardware counter."
msgstr "计数器工具可用于轻松实例化硬件计数器。"
#: ../../source/SpinalHDL/Libraries/utils.rst:108
msgid "Instantiation syntax"
msgstr "实例化语法"
#: ../../source/SpinalHDL/Libraries/utils.rst:109
#: ../../source/SpinalHDL/Libraries/utils.rst:152
msgid "Notes"
msgstr "笔记"
#: ../../source/SpinalHDL/Libraries/utils.rst:110
msgid "``Counter(start: BigInt, end: BigInt[, inc : Bool])``"
msgstr "``计数器（开始：BigInt，结束：BigInt[，inc：Bool]）``"
#: ../../source/SpinalHDL/Libraries/utils.rst:112
msgid "``Counter(range : Range[, inc : Bool])``"
msgstr "``计数器（范围：范围[，公司：布尔]）``"
#: ../../source/SpinalHDL/Libraries/utils.rst:113
msgid "Compatible with the  ``x to y`` ``x until y`` syntaxes"
msgstr "与 ``x to y`` ``x Until y`` 语法兼容"
#: ../../source/SpinalHDL/Libraries/utils.rst:114
msgid "``Counter(stateCount: BigInt[, inc : Bool])``"
msgstr "``计数器（stateCount：BigInt [，inc：Bool]）``"
#: ../../source/SpinalHDL/Libraries/utils.rst:115
msgid "Starts at zero and ends at ``stateCount - 1``"
msgstr "从 0 开始，到“stateCount - 1”结束"
#: ../../source/SpinalHDL/Libraries/utils.rst:116
msgid "``Counter(bitCount: BitCount[, inc : Bool])``"
msgstr "``计数器（bitCount：BitCount [，inc：Bool]）``"
#: ../../source/SpinalHDL/Libraries/utils.rst:117
msgid "Starts at zero and ends at ``(1 << bitCount) - 1``"
msgstr "从 0 开始，到 ``(1 << bitCount) - 1`` 结束"
#: ../../source/SpinalHDL/Libraries/utils.rst:119
msgid "A counter can be controlled by methods, and wires can be read:"
msgstr "计数器可以通过方法控制，并且可以读取连线："
#: ../../source/SpinalHDL/Libraries/utils.rst:135
msgid ""
"When a ``Counter`` overflows (reached end value), it restarts the next cycle"
" to its start value."
msgstr "当“计数器”溢出（达到最终值）时，它会重新启动下一个周期至其起始值。"
#: ../../source/SpinalHDL/Libraries/utils.rst:138
msgid "Currently, only up counter are supported."
msgstr "目前仅支持向上计数器。"
#: ../../source/SpinalHDL/Libraries/utils.rst:140
msgid ""
"``CounterFreeRun`` builds an always running counter: "
"``CounterFreeRun(stateCount: BigInt)``."
msgstr ""
"``CounterFreeRun`` 构建一个始终运行的计数器：``CounterFreeRun(stateCount: BigInt)``。"
#: ../../source/SpinalHDL/Libraries/utils.rst:143
msgid "Timeout"
msgstr "暂停"
#: ../../source/SpinalHDL/Libraries/utils.rst:145
msgid ""
"The Timeout tool can be used to easily instanciate an hardware timeout."
msgstr "超时工具可用于轻松实例化硬件超时。"
#: ../../source/SpinalHDL/Libraries/utils.rst:151
msgid "Instanciation syntax"
msgstr "实例化语法"
#: ../../source/SpinalHDL/Libraries/utils.rst:153
msgid "Timeout(cycles : BigInt)"
msgstr "超时（周期：BigInt）"
#: ../../source/SpinalHDL/Libraries/utils.rst:154
msgid "Tick after ``cycles`` clocks"
msgstr "在“cycles”时钟后勾选"
#: ../../source/SpinalHDL/Libraries/utils.rst:155
msgid "Timeout(time : TimeNumber)"
msgstr "超时（时间：时间编号）"
#: ../../source/SpinalHDL/Libraries/utils.rst:156
msgid "Tick after a ``time`` duration"
msgstr "在“time”持续时间后勾选"
#: ../../source/SpinalHDL/Libraries/utils.rst:157
msgid "Timeout(frequency : HertzNumber)"
msgstr "超时（频率：赫兹数）"
#: ../../source/SpinalHDL/Libraries/utils.rst:158
msgid "Tick at an ``frequency`` rate"
msgstr "以“频率”速率勾选"
#: ../../source/SpinalHDL/Libraries/utils.rst:161
msgid ""
"There is an example of different syntaxes which could be used with the "
"Counter tool"
msgstr "有一个可以与计数器工具一起使用的不同语法的示例"
#: ../../source/SpinalHDL/Libraries/utils.rst:171
msgid ""
"If you instanciate an ``Timeout`` with an time or frequency setup, the "
"implicit ``ClockDomain`` should have an frequency setting."
msgstr "如果您使用时间或频率设置实例化“Timeout”，则隐式“ClockDomain”应该具有频率设置。"
#: ../../source/SpinalHDL/Libraries/utils.rst:174
msgid "ResetCtrl"
msgstr "重置控制"
#: ../../source/SpinalHDL/Libraries/utils.rst:176
msgid "The ResetCtrl provide some utilities to manage resets."
msgstr "ResetCtrl 提供了一些实用程序来管理重置。"
#: ../../source/SpinalHDL/Libraries/utils.rst:179
msgid "asyncAssertSyncDeassert"
msgstr "asyncAssertSyncDeassert"
#: ../../source/SpinalHDL/Libraries/utils.rst:181
msgid ""
"You can filter an asynchronous reset by using an asynchronously asserted "
"synchronously deaserted logic. To do it you can use the "
"``ResetCtrl.asyncAssertSyncDeassert`` function which will return you the "
"filtred value."
msgstr ""
"您可以使用异步断言同步解除逻辑来过滤异步复位。为此，您可以使用“ResetCtrl.asyncAssertSyncDeassert”函数，该函数将返回过滤值。"
#: ../../source/SpinalHDL/Libraries/utils.rst:187
msgid "Argument name"
msgstr "参数名称"
#: ../../source/SpinalHDL/Libraries/utils.rst:188
msgid "Type"
msgstr "类型"
#: ../../source/SpinalHDL/Libraries/utils.rst:190
msgid "input"
msgstr "输入"
#: ../../source/SpinalHDL/Libraries/utils.rst:192
msgid "Signal that should be filtered"
msgstr "应过滤的信号"
#: ../../source/SpinalHDL/Libraries/utils.rst:193
msgid "clockDomain"
msgstr "时钟域"
#: ../../source/SpinalHDL/Libraries/utils.rst:194
msgid "ClockDomain"
msgstr "时钟域"
#: ../../source/SpinalHDL/Libraries/utils.rst:195
msgid "ClockDomain which will use the filtered value"
msgstr "ClockDomain 将使用过滤后的值"
#: ../../source/SpinalHDL/Libraries/utils.rst:196
msgid "inputPolarity"
msgstr "输入极性"
#: ../../source/SpinalHDL/Libraries/utils.rst:197
#: ../../source/SpinalHDL/Libraries/utils.rst:200
msgid "Polarity"
msgstr "极性"
#: ../../source/SpinalHDL/Libraries/utils.rst:198
msgid "HIGH/LOW (default=HIGH)"
msgstr "高/低（默认=高）"
#: ../../source/SpinalHDL/Libraries/utils.rst:199
msgid "outputPolarity"
msgstr "输出极性"
#: ../../source/SpinalHDL/Libraries/utils.rst:201
msgid "HIGH/LOW (default=clockDomain.config.resetActiveLevel)"
msgstr "高/低（默认=clockDomain.config.resetActiveLevel）"
#: ../../source/SpinalHDL/Libraries/utils.rst:202
msgid "bufferDepth"
msgstr "缓冲区深度"
#: ../../source/SpinalHDL/Libraries/utils.rst:203
#: ../../source/SpinalHDL/Libraries/utils.rst:220
msgid "Int"
msgstr "INT"
#: ../../source/SpinalHDL/Libraries/utils.rst:204
msgid "Number of register stages used to avoid metastability (default=2)"
msgstr "用于避免亚稳态的寄存器级数（默认=2）"
#: ../../source/SpinalHDL/Libraries/utils.rst:207
msgid ""
"There is also an ``ResetCtrl.asyncAssertSyncDeassertDrive`` version of tool "
"which directly assign the ``clockDomain`` reset with the filtred value."
msgstr ""
"还有一个“ResetCtrl.asyncAssertSyncDeassertDrive”版本的工具，它直接使用过滤值分配“clockDomain”重置。"
#: ../../source/SpinalHDL/Libraries/utils.rst:210
msgid "Special utilities"
msgstr "特殊公用事业"
#: ../../source/SpinalHDL/Libraries/utils.rst:219
msgid "LatencyAnalysis(paths : Node*)"
msgstr "延迟分析（路径：节点*）"
#: ../../source/SpinalHDL/Libraries/utils.rst
msgid ""
"Return the shortest path,in therm of cycle, that travel through all nodes,"
msgstr "返回经过所有节点的最短路径，以循环的形式，"
#: ../../source/SpinalHDL/Libraries/utils.rst
msgid "from the first one to the last one"
msgstr "从第一个到最后一个"
