
msgid ""
msgstr ""
"Project-Id-Version:SpinalHDL"
"Report-Msgid-Bugs-To:"
"POT-Creation-Date:2023-12-01 11:48+0800"
"PO-Revision-Date:YEAR-MO-DA HO:MI+ZONE"
"Last-Translator:FULL NAME <EMAIL@ADDRESS>"
"Language:zh_CN"
"Language-Team:zh_CN <LL@li.org>"
"Plural-Forms:nplurals=1; plural=0;"
"MIME-Version:1.0"
"Content-Type:text/plain; charset=utf-8"
"Content-Transfer-Encoding:8bit"
"Generated-By:Babel 2.13.1"

#: ../../source/SpinalHDL/Libraries/stream.rst:7
msgid "Stream"
msgstr "溪流"
#: ../../source/SpinalHDL/Libraries/stream.rst:10
msgid "Specification"
msgstr "规格"
#: ../../source/SpinalHDL/Libraries/stream.rst:12
msgid "The Stream interface is a simple handshake protocol to carry payload."
msgstr "Stream接口是一个简单的握手协议来承载有效负载。"
#: ../../source/SpinalHDL/Libraries/stream.rst:13
msgid ""
"It could be used for example to push and pop elements into a FIFO, send "
"requests to a UART controller, etc."
msgstr "例如，它可用于将元素推入和弹出到 FIFO、向 UART 控制器发送请求等。"
#: ../../source/SpinalHDL/Libraries/stream.rst:19
msgid "Signal"
msgstr "信号"
#: ../../source/SpinalHDL/Libraries/stream.rst:20
#: ../../source/SpinalHDL/Libraries/stream.rst:217
#: ../../source/SpinalHDL/Libraries/stream.rst:232
#: ../../source/SpinalHDL/Libraries/stream.rst:273
#: ../../source/SpinalHDL/Libraries/stream.rst:294
#: ../../source/SpinalHDL/Libraries/stream.rst:335
#: ../../source/SpinalHDL/Libraries/stream.rst:353
msgid "Type"
msgstr "类型"
#: ../../source/SpinalHDL/Libraries/stream.rst:21
msgid "Driver"
msgstr "司机"
#: ../../source/SpinalHDL/Libraries/stream.rst:22
#: ../../source/SpinalHDL/Libraries/stream.rst:96
#: ../../source/SpinalHDL/Libraries/stream.rst:218
#: ../../source/SpinalHDL/Libraries/stream.rst:233
#: ../../source/SpinalHDL/Libraries/stream.rst:274
#: ../../source/SpinalHDL/Libraries/stream.rst:295
#: ../../source/SpinalHDL/Libraries/stream.rst:336
#: ../../source/SpinalHDL/Libraries/stream.rst:354
#: ../../source/SpinalHDL/Libraries/stream.rst:423
#: ../../source/SpinalHDL/Libraries/stream.rst:438
msgid "Description"
msgstr "描述"
#: ../../source/SpinalHDL/Libraries/stream.rst:23
msgid "Don't care when"
msgstr "不在乎什么时候"
#: ../../source/SpinalHDL/Libraries/stream.rst:24
msgid "valid"
msgstr "有效的"
#: ../../source/SpinalHDL/Libraries/stream.rst:25
#: ../../source/SpinalHDL/Libraries/stream.rst:30
#: ../../source/SpinalHDL/Libraries/stream.rst:110
#: ../../source/SpinalHDL/Libraries/stream.rst:114
#: ../../source/SpinalHDL/Libraries/stream.rst:241
msgid "Bool"
msgstr "布尔"
#: ../../source/SpinalHDL/Libraries/stream.rst:26
#: ../../source/SpinalHDL/Libraries/stream.rst:36
msgid "Master"
msgstr "掌握"
#: ../../source/SpinalHDL/Libraries/stream.rst:27
msgid "When high => payload present on the interface"
msgstr "当高 => 接口上存在有效负载时"
#: ../../source/SpinalHDL/Libraries/stream.rst:29
msgid "ready"
msgstr "准备好"
#: ../../source/SpinalHDL/Libraries/stream.rst:31
msgid "Slave"
msgstr "奴隶"
#: ../../source/SpinalHDL/Libraries/stream.rst:32
msgid "When low => transaction are not consumed by the slave"
msgstr "当低电平时 => 事务不被从机消耗"
#: ../../source/SpinalHDL/Libraries/stream.rst:33
#: ../../source/SpinalHDL/Libraries/stream.rst:38
msgid "valid is low"
msgstr "有效值低"
#: ../../source/SpinalHDL/Libraries/stream.rst:34
msgid "payload"
msgstr "有效载荷"
#: ../../source/SpinalHDL/Libraries/stream.rst:35
#: ../../source/SpinalHDL/Libraries/stream.rst:220
#: ../../source/SpinalHDL/Libraries/stream.rst:276
#: ../../source/SpinalHDL/Libraries/stream.rst:338
msgid "T"
msgstr "时间"
#: ../../source/SpinalHDL/Libraries/stream.rst:37
msgid "Content of the transaction"
msgstr "交易内容"
#: ../../source/SpinalHDL/Libraries/stream.rst:49
msgid "There is some examples of usage in SpinalHDL :"
msgstr "SpinalHDL 有一些用法示例："
#: ../../source/SpinalHDL/Libraries/stream.rst:70
msgid ""
"Each slave can or can't allow the payload to change when valid is high and "
"ready is low. For examples:"
msgstr "当 valid 为高且 Ready 为低时，每个从设备可以或不允许更改有效负载。举些例子："
#: ../../source/SpinalHDL/Libraries/stream.rst:73
msgid ""
"An priority arbiter without lock logic can switch from one input to the "
"other (which will change the payload)."
msgstr "没有锁定逻辑的优先级仲裁器可以从一个输入切换到另一个输入（这将改变有效负载）。"
#: ../../source/SpinalHDL/Libraries/stream.rst:74
msgid ""
"An UART controller could directly use the write port to drive UART pins and "
"only consume the transaction at the end of the transmission. Be careful with"
" that."
msgstr "UART 控制器可以直接使用写入端口来驱动 UART 引脚，并且仅在传输结束时消耗事务。对此要小心。"
#: ../../source/SpinalHDL/Libraries/stream.rst:78
msgid "Semantics"
msgstr "语义学"
#: ../../source/SpinalHDL/Libraries/stream.rst:80
msgid ""
"When manually reading/driving the signals of a Stream keep in mind that:"
msgstr "当手动读取/驱动流的信号时，请记住："
#: ../../source/SpinalHDL/Libraries/stream.rst:82
msgid ""
"After being asserted, ``valid`` may only be deasserted once the current "
"payload was acknowleged. This means ``valid`` can only toggle to 0 the cycle"
" after a the slave did a read by asserting ``ready``."
msgstr ""
"断言后，“valid”只有在当前有效负载被确认后才能被取消断言。这意味着“valid”只能在从机通过断言“ready”进行读取后的周期切换到 0。"
#: ../../source/SpinalHDL/Libraries/stream.rst:83
msgid "In contrast to that ``ready`` may change at any time."
msgstr "与此相反，“准备好”可能随时改变。"
#: ../../source/SpinalHDL/Libraries/stream.rst:84
msgid ""
"A transfer is only done on cycles where both ``valid`` and ``ready`` are "
"asserted."
msgstr "仅在“valid”和“ready”均已断言的周期上进行传输。"
#: ../../source/SpinalHDL/Libraries/stream.rst:85
msgid ""
"``valid`` of a Stream must not depend on ``ready`` in a combinatorial way "
"and any path between the two must be registered."
msgstr "Stream 的“valid”不能以组合方式依赖于“ready”，并且必须注册两者之间的任何路径。"
#: ../../source/SpinalHDL/Libraries/stream.rst:86
msgid "It is recommended that ``valid`` does not depend on ``ready`` at all."
msgstr "建议“valid”根本不依赖于“ready”。"
#: ../../source/SpinalHDL/Libraries/stream.rst:89
msgid "Functions"
msgstr "功能"
#: ../../source/SpinalHDL/Libraries/stream.rst:95
msgid "Syntax"
msgstr "句法"
#: ../../source/SpinalHDL/Libraries/stream.rst:97
#: ../../source/SpinalHDL/Libraries/stream.rst:453
msgid "Return"
msgstr "返回"
#: ../../source/SpinalHDL/Libraries/stream.rst:98
msgid "Latency"
msgstr "潜伏"
#: ../../source/SpinalHDL/Libraries/stream.rst:99
msgid "Stream(type : Data)"
msgstr "流（类型：数据）"
#: ../../source/SpinalHDL/Libraries/stream.rst
#: ../../source/SpinalHDL/Libraries/stream.rst:100
msgid "Create a Stream of a given type"
msgstr "创建给定类型的 Stream"
#: ../../source/SpinalHDL/Libraries/stream.rst:101
#: ../../source/SpinalHDL/Libraries/stream.rst:106
#: ../../source/SpinalHDL/Libraries/stream.rst:118
#: ../../source/SpinalHDL/Libraries/stream.rst:125
#: ../../source/SpinalHDL/Libraries/stream.rst:131
#: ../../source/SpinalHDL/Libraries/stream.rst:137
#: ../../source/SpinalHDL/Libraries/stream.rst:163
#: ../../source/SpinalHDL/Libraries/stream.rst:168
#: ../../source/SpinalHDL/Libraries/stream.rst:235
#: ../../source/SpinalHDL/Libraries/stream.rst:238
#: ../../source/SpinalHDL/Libraries/stream.rst:297
#: ../../source/SpinalHDL/Libraries/stream.rst:300
#: ../../source/SpinalHDL/Libraries/stream.rst:356
#: ../../source/SpinalHDL/Libraries/stream.rst:359
#: ../../source/SpinalHDL/Libraries/stream.rst:455
#: ../../source/SpinalHDL/Libraries/stream.rst:457
msgid "Stream[T]"
msgstr "流[T]"
#: ../../source/SpinalHDL/Libraries/stream.rst:103
msgid "master/slave Stream(type : Data)"
msgstr "主/从流（类型：数据）"
#: ../../source/SpinalHDL/Libraries/stream.rst
msgid "Initialized with corresponding in/out setup"
msgstr "使用相应的输入/输出设置进行初始化"
#: ../../source/SpinalHDL/Libraries/stream.rst:108
msgid "x.fire"
msgstr "x.火"
#: ../../source/SpinalHDL/Libraries/stream.rst:109
msgid "Return True when a transaction is consumed on the bus (valid && ready)"
msgstr "当交易在总线上被消费时返回 True（有效 && 就绪）"
#: ../../source/SpinalHDL/Libraries/stream.rst:112
msgid "x.isStall"
msgstr "x. 失速"
#: ../../source/SpinalHDL/Libraries/stream.rst:113
msgid "Return True when a transaction is stall on the bus (valid && ! ready)"
msgstr "当事务在总线上停止时返回 True（有效 && ！就绪）"
#: ../../source/SpinalHDL/Libraries/stream.rst:116
msgid "x.queue(size:Int)"
msgstr "x.queue(大小:Int)"
#: ../../source/SpinalHDL/Libraries/stream.rst:117
msgid "Return a Stream connected to x through a FIFO"
msgstr "返回通过 FIFO 连接到 x 的 Stream"
#: ../../source/SpinalHDL/Libraries/stream.rst:119
msgid "2"
msgstr "2"
#: ../../source/SpinalHDL/Libraries/stream.rst
msgid "x.m2sPipe()"
msgstr "x.m2sPipe()"
#: ../../source/SpinalHDL/Libraries/stream.rst
msgid "x.stage()"
msgstr "x.stage()"
#: ../../source/SpinalHDL/Libraries/stream.rst
msgid "Return a Stream drived by x"
msgstr "返回由 x 驱动的 Stream"
#: ../../source/SpinalHDL/Libraries/stream.rst
msgid "through a register stage that cut valid/payload paths"
msgstr "通过寄存器阶段切断有效/有效负载路径"
#: ../../source/SpinalHDL/Libraries/stream.rst
msgid "Cost = (payload width + 1) flop flop"
msgstr "成本 = (有效负载宽度 + 1) 触发器 flop"
#: ../../source/SpinalHDL/Libraries/stream.rst:126
#: ../../source/SpinalHDL/Libraries/stream.rst:138
#: ../../source/SpinalHDL/Libraries/stream.rst:148
#: ../../source/SpinalHDL/Libraries/stream.rst:159
msgid "1"
msgstr "1"
#: ../../source/SpinalHDL/Libraries/stream.rst:127
msgid "x.s2mPipe()"
msgstr "x.s2mPipe()"
#: ../../source/SpinalHDL/Libraries/stream.rst
msgid "ready paths is cut by a register stage"
msgstr "就绪路径被寄存器阶段切断"
#: ../../source/SpinalHDL/Libraries/stream.rst
msgid "Cost = payload width * (mux2 + 1 flip flop)"
msgstr "成本 = 有效负载宽度 * (mux2 + 1 个触发器)"
#: ../../source/SpinalHDL/Libraries/stream.rst:132
#: ../../source/SpinalHDL/Libraries/stream.rst:143
#: ../../source/SpinalHDL/Libraries/stream.rst:153
#: ../../source/SpinalHDL/Libraries/stream.rst:164
#: ../../source/SpinalHDL/Libraries/stream.rst:169
msgid "0"
msgstr "0"
#: ../../source/SpinalHDL/Libraries/stream.rst:133
msgid "x.halfPipe()"
msgstr "x.halfPipe()"
#: ../../source/SpinalHDL/Libraries/stream.rst
msgid "valid/ready/payload paths are cut by some register"
msgstr "有效/就绪/有效负载路径被某些寄存器切断"
#: ../../source/SpinalHDL/Libraries/stream.rst
msgid "Cost = (payload width + 2) flip flop, bandwidth divided by two"
msgstr "成本 = (有效负载宽度 + 2) 触发器，带宽除以二"
#: ../../source/SpinalHDL/Libraries/stream.rst
msgid "x << y"
msgstr "x << y"
#: ../../source/SpinalHDL/Libraries/stream.rst
msgid "y >> x"
msgstr "y >> x"
#: ../../source/SpinalHDL/Libraries/stream.rst:141
msgid "Connect y to x"
msgstr "将 y 连接到 x"
#: ../../source/SpinalHDL/Libraries/stream.rst
msgid "x <-< y"
msgstr "x <-< y"
#: ../../source/SpinalHDL/Libraries/stream.rst
msgid "y >-> x"
msgstr "y >-> x"
#: ../../source/SpinalHDL/Libraries/stream.rst:146
msgid "Connect y to x through a m2sPipe"
msgstr "通过 m2sPipe 将 y 连接到 x"
#: ../../source/SpinalHDL/Libraries/stream.rst
msgid "x </< y"
msgstr "x </< y"
#: ../../source/SpinalHDL/Libraries/stream.rst
msgid "y >/> x"
msgstr "y >/> x"
#: ../../source/SpinalHDL/Libraries/stream.rst:151
msgid "Connect y to x through a s2mPipe"
msgstr "通过 s2mPipe 将 y 连接到 x"
#: ../../source/SpinalHDL/Libraries/stream.rst
msgid "x <-/< y"
msgstr "x <-/< y"
#: ../../source/SpinalHDL/Libraries/stream.rst
msgid "y >/-> x"
msgstr "y >/-> x"
#: ../../source/SpinalHDL/Libraries/stream.rst
msgid "Connect y to x through s2mPipe().m2sPipe()"
msgstr "通过 s2mPipe().m2sPipe() 将 y 连接到 x"
#: ../../source/SpinalHDL/Libraries/stream.rst
msgid "Which imply no combinatorial path between x and y"
msgstr "这意味着 x 和 y 之间没有组合路径"
#: ../../source/SpinalHDL/Libraries/stream.rst:160
msgid "x.haltWhen(cond : Bool)"
msgstr "x.haltWhen(cond : Bool)"
#: ../../source/SpinalHDL/Libraries/stream.rst
msgid "Return a Stream connected to x"
msgstr "返回连接到 x 的 Stream"
#: ../../source/SpinalHDL/Libraries/stream.rst
msgid "Halted when cond is true"
msgstr "cond 为 true 时停止"
#: ../../source/SpinalHDL/Libraries/stream.rst:165
msgid "x.throwWhen(cond : Bool)"
msgstr "x.throwWhen(cond : Bool)"
#: ../../source/SpinalHDL/Libraries/stream.rst
msgid "When cond is true, transaction are dropped"
msgstr "当 cond 为 true 时，交易将被丢弃"
#: ../../source/SpinalHDL/Libraries/stream.rst:172
msgid "The following code will create this logic :"
msgstr "以下代码将创建此逻辑："
#: ../../source/SpinalHDL/Libraries/stream.rst:192
msgid "Utils"
msgstr "实用程序"
#: ../../source/SpinalHDL/Libraries/stream.rst:194
msgid ""
"There is many utils that you can use in your design in conjunction with the "
"Stream bus, this chapter will document them."
msgstr "有许多实用程序可以在设计中与 Stream 总线结合使用，本章将记录它们。"
#: ../../source/SpinalHDL/Libraries/stream.rst:197
msgid "StreamFifo"
msgstr "流先进先出"
#: ../../source/SpinalHDL/Libraries/stream.rst:199
msgid ""
"On each stream you can call the .queue(size) to get a buffered stream. But "
"you can also instantiate the FIFO component itself :"
msgstr "在每个流上，您可以调用 .queue(size) 来获取缓冲流。但您也可以实例化 FIFO 组件本身："
#: ../../source/SpinalHDL/Libraries/stream.rst:216
#: ../../source/SpinalHDL/Libraries/stream.rst:272
#: ../../source/SpinalHDL/Libraries/stream.rst:334
msgid "parameter name"
msgstr "参数名称"
#: ../../source/SpinalHDL/Libraries/stream.rst:219
#: ../../source/SpinalHDL/Libraries/stream.rst:275
#: ../../source/SpinalHDL/Libraries/stream.rst:337
msgid "dataType"
msgstr "数据类型"
#: ../../source/SpinalHDL/Libraries/stream.rst:221
#: ../../source/SpinalHDL/Libraries/stream.rst:277
#: ../../source/SpinalHDL/Libraries/stream.rst:339
msgid "Payload data type"
msgstr "负载数据类型"
#: ../../source/SpinalHDL/Libraries/stream.rst:222
#: ../../source/SpinalHDL/Libraries/stream.rst:278
msgid "depth"
msgstr "深度"
#: ../../source/SpinalHDL/Libraries/stream.rst:223
#: ../../source/SpinalHDL/Libraries/stream.rst:279
msgid "Int"
msgstr "INT"
#: ../../source/SpinalHDL/Libraries/stream.rst:224
#: ../../source/SpinalHDL/Libraries/stream.rst:280
msgid "Size of the memory used to store elements"
msgstr "用于存储元素的内存大小"
#: ../../source/SpinalHDL/Libraries/stream.rst:231
#: ../../source/SpinalHDL/Libraries/stream.rst:293
#: ../../source/SpinalHDL/Libraries/stream.rst:352
msgid "io name"
msgstr "io名称"
#: ../../source/SpinalHDL/Libraries/stream.rst:234
#: ../../source/SpinalHDL/Libraries/stream.rst:296
msgid "push"
msgstr "推"
#: ../../source/SpinalHDL/Libraries/stream.rst:236
#: ../../source/SpinalHDL/Libraries/stream.rst:298
#: ../../source/SpinalHDL/Libraries/stream.rst:357
msgid "Used to push elements"
msgstr "用于推送元素"
#: ../../source/SpinalHDL/Libraries/stream.rst:237
#: ../../source/SpinalHDL/Libraries/stream.rst:299
msgid "pop"
msgstr "流行音乐"
#: ../../source/SpinalHDL/Libraries/stream.rst:239
#: ../../source/SpinalHDL/Libraries/stream.rst:301
#: ../../source/SpinalHDL/Libraries/stream.rst:360
msgid "Used to pop elements"
msgstr "用于弹出元素"
#: ../../source/SpinalHDL/Libraries/stream.rst:240
msgid "flush"
msgstr "冲水"
#: ../../source/SpinalHDL/Libraries/stream.rst:242
msgid "Used to remove all elements inside the FIFO"
msgstr "用于移除 FIFO 内的所有元素"
#: ../../source/SpinalHDL/Libraries/stream.rst:243
msgid "occupancy"
msgstr "占用"
#: ../../source/SpinalHDL/Libraries/stream.rst:244
#: ../../source/SpinalHDL/Libraries/stream.rst:303
#: ../../source/SpinalHDL/Libraries/stream.rst:306
msgid "UInt of log2Up(depth + 1) bits"
msgstr "log2Up(深度 + 1) 位的单位"
#: ../../source/SpinalHDL/Libraries/stream.rst:245
msgid "Indicate the internal memory occupancy"
msgstr "指示内部存储器占用情况"
#: ../../source/SpinalHDL/Libraries/stream.rst:249
msgid "StreamFifoCC"
msgstr "流FifoCC"
#: ../../source/SpinalHDL/Libraries/stream.rst:251
msgid ""
"You can instanciate the dual clock domain version of the fifo the following "
"way :"
msgstr "您可以通过以下方式实例化双时钟域版本的 fifo："
#: ../../source/SpinalHDL/Libraries/stream.rst:281
msgid "pushClock"
msgstr "推时钟"
#: ../../source/SpinalHDL/Libraries/stream.rst:282
#: ../../source/SpinalHDL/Libraries/stream.rst:285
#: ../../source/SpinalHDL/Libraries/stream.rst:341
#: ../../source/SpinalHDL/Libraries/stream.rst:344
msgid "ClockDomain"
msgstr "时钟域"
#: ../../source/SpinalHDL/Libraries/stream.rst:283
#: ../../source/SpinalHDL/Libraries/stream.rst:342
msgid "Clock domain used by the push side"
msgstr "推送侧使用的时钟域"
#: ../../source/SpinalHDL/Libraries/stream.rst:284
msgid "popClock"
msgstr "流行时钟"
#: ../../source/SpinalHDL/Libraries/stream.rst:286
#: ../../source/SpinalHDL/Libraries/stream.rst:345
msgid "Clock domain used by the pop side"
msgstr "pop侧使用的时钟域"
#: ../../source/SpinalHDL/Libraries/stream.rst:302
msgid "pushOccupancy"
msgstr "推送占用"
#: ../../source/SpinalHDL/Libraries/stream.rst:304
msgid ""
"Indicate the internal memory occupancy (from the push side perspective)"
msgstr "表示内部内存占用情况（从推送方角度）"
#: ../../source/SpinalHDL/Libraries/stream.rst:305
msgid "popOccupancy"
msgstr "流行占用率"
#: ../../source/SpinalHDL/Libraries/stream.rst:307
msgid ""
"Indicate the internal memory occupancy  (from the pop side perspective)"
msgstr "表示内存占用情况（从pop侧角度）"
#: ../../source/SpinalHDL/Libraries/stream.rst:311
msgid "StreamCCByToggle"
msgstr "StreamCCByToggle"
#: ../../source/SpinalHDL/Libraries/stream.rst:313
msgid ""
"Component that connects Streams across clock domains based on toggling "
"signals."
msgstr "基于切换信号跨时钟域连接流的组件。"
#: ../../source/SpinalHDL/Libraries/stream.rst:314
msgid ""
"This way of implementing a cross clock domain bridge is characterized by a "
"small area usage but also a low bandwidth."
msgstr "这种实现跨时钟域桥的方式的特点是占用面积小，但带宽较低。"
#: ../../source/SpinalHDL/Libraries/stream.rst:340
msgid "inputClock"
msgstr "输入时钟"
#: ../../source/SpinalHDL/Libraries/stream.rst:343
msgid "outputClock"
msgstr "输出时钟"
#: ../../source/SpinalHDL/Libraries/stream.rst:355
msgid "input"
msgstr "输入"
#: ../../source/SpinalHDL/Libraries/stream.rst:358
msgid "output"
msgstr "输出"
#: ../../source/SpinalHDL/Libraries/stream.rst:363
msgid ""
"Alternatively you can also use a this shorter syntax which directly return "
"you the cross clocked stream:"
msgstr "或者，您也可以使用更短的语法，直接返回交叉时钟流："
#: ../../source/SpinalHDL/Libraries/stream.rst:377
msgid "StreamWidthAdapter"
msgstr "流宽度适配器"
#: ../../source/SpinalHDL/Libraries/stream.rst:379
msgid ""
"This component adapts the width of the input stream to the output stream. "
"When the width of the ``outStream`` payload is greater than the "
"``inStream``, by combining the payloads of several input transactions into "
"one; conversely, if the payload width of the ``outStream`` is less than the "
"``inStream``, one input transaction will be split into several output "
"transactions."
msgstr ""
"该组件使输入流的宽度适应输出流。当“outStream”有效负载的宽度大于“inStream”时，通过将多个输入事务的有效负载合并为一个；相反，如果“outStream”的有效负载宽度小于“inStream”，则一个输入事务将被拆分为多个输出事务。"
#: ../../source/SpinalHDL/Libraries/stream.rst:382
msgid ""
"In the best case, the width of the payload of the ``inStream`` should be an "
"integer multiple of the ``outStream`` as shown below."
msgstr "在最好的情况下，“inStream”的有效负载宽度应该是“outStream”的整数倍，如下所示。"
#: ../../source/SpinalHDL/Libraries/stream.rst:390
msgid ""
"As in the example above, the two ``inStream`` transactions will be merged "
"into one ``outStream`` transaction, and the payload of the first input "
"transaction will be placed on the lower bits of the output payload by "
"default."
msgstr ""
"如上例所示，两个“inStream”交易将合并为一个“outStream”交易，并且第一个输入交易的有效负载将默认放置在输出有效负载的较低位上。"
#: ../../source/SpinalHDL/Libraries/stream.rst:392
msgid ""
"If the expected order of input transaction payload placement is different "
"from the default setting, here is an example."
msgstr "如果输入事务有效负载放置的预期顺序与默认设置不同，请参阅以下示例。"
#: ../../source/SpinalHDL/Libraries/stream.rst:400
msgid ""
"There is also a traditional parameter called ``endianness``, which has the "
"same effect as ``ORDER``. The value of ``endianness`` is the same as "
"``LOWER_FIRST`` of ``order`` when it is ``LITTLE``, and the same as "
"``HIGHER_FIRST`` when it is ``BIG``. The ``padding`` parameter is an "
"optional boolean value to determine whether the adapter accepts non-integer "
"multiples of the input and output payload width."
msgstr ""
"还有一个传统参数称为“endianness”，它与“ORDER”具有相同的效果。当为“LITTLE”时，“endianness”的值与“order”的“LOWER_FIRST”相同，当为“BIG”时，与“HIGHER_FIRST”相同。"
" “padding”参数是一个可选的布尔值，用于确定适配器是否接受输入和输出有效负载宽度的非整数倍。"
#: ../../source/SpinalHDL/Libraries/stream.rst:406
msgid "StreamArbiter"
msgstr "流仲裁器"
#: ../../source/SpinalHDL/Libraries/stream.rst:408
msgid ""
"When you have multiple Streams and you want to arbitrate them to drive a "
"single one, you can use the StreamArbiterFactory."
msgstr "当您有多个 Stream 并且您想要仲裁它们以驱动单个 Stream 时，您可以使用 StreamArbiterFactory。"
#: ../../source/SpinalHDL/Libraries/stream.rst:422
msgid "Arbitration functions"
msgstr "仲裁功能"
#: ../../source/SpinalHDL/Libraries/stream.rst:424
msgid "lowerFirst"
msgstr "低优先级"
#: ../../source/SpinalHDL/Libraries/stream.rst:425
msgid "Lower port have priority over higher port"
msgstr "较低端口优先于较高端口"
#: ../../source/SpinalHDL/Libraries/stream.rst:426
msgid "roundRobin"
msgstr "循环赛"
#: ../../source/SpinalHDL/Libraries/stream.rst:427
msgid "Fair round robin arbitration"
msgstr "公平循环仲裁"
#: ../../source/SpinalHDL/Libraries/stream.rst:428
msgid "sequentialOrder"
msgstr "顺序"
#: ../../source/SpinalHDL/Libraries/stream.rst
msgid "Could be used to retrieve transaction in a sequancial order"
msgstr "可用于按顺序检索交易"
#: ../../source/SpinalHDL/Libraries/stream.rst
msgid "First transaction should come from port zero, then from port one, ..."
msgstr "第一个事务应该来自端口 0，然后来自端口 1，..."
#: ../../source/SpinalHDL/Libraries/stream.rst:437
msgid "Lock functions"
msgstr "锁定功能"
#: ../../source/SpinalHDL/Libraries/stream.rst:439
msgid "noLock"
msgstr "无锁"
#: ../../source/SpinalHDL/Libraries/stream.rst:440
msgid ""
"The port selection could change every cycle, even if the transaction on the "
"selected port is not consumed."
msgstr "即使所选端口上的交易未被消耗，端口选择也可能在每个周期发生变化。"
#: ../../source/SpinalHDL/Libraries/stream.rst:441
msgid "transactionLock"
msgstr "交易锁"
#: ../../source/SpinalHDL/Libraries/stream.rst:442
msgid ""
"The port selection is locked until the transaction on the selected port is "
"consumed."
msgstr "端口选择被锁定，直到所选端口上的交易被消耗。"
#: ../../source/SpinalHDL/Libraries/stream.rst:443
msgid "fragmentLock"
msgstr "片段锁"
#: ../../source/SpinalHDL/Libraries/stream.rst
msgid "Could be used to arbitrate Stream[Flow[T]]."
msgstr "可用于仲裁 Stream[Flow[T]]。"
#: ../../source/SpinalHDL/Libraries/stream.rst
msgid ""
"In this mode, the port selection is locked until the selected port finish is"
" burst (last=True)."
msgstr "在此模式下，端口选择被锁定，直到所选端口完成突发（last=True）。"
#: ../../source/SpinalHDL/Libraries/stream.rst:452
msgid "Generation functions"
msgstr "生成函数"
#: ../../source/SpinalHDL/Libraries/stream.rst:454
msgid "on(inputs : Seq[Stream[T]])"
msgstr "on(输入：Seq[Stream[T]])"
#: ../../source/SpinalHDL/Libraries/stream.rst:456
msgid "onArgs(inputs : Stream[T]*)"
msgstr "onArgs(输入：流[T]*)"
#: ../../source/SpinalHDL/Libraries/stream.rst:460
msgid "StreamJoin"
msgstr "流连接"
#: ../../source/SpinalHDL/Libraries/stream.rst:462
msgid ""
"This utile takes multiple input streams and wait until all of them fire "
"before letting all of them through."
msgstr "该实用程序接受多个输入流，并等到所有输入流都触发后才让所有输入流通过。"
#: ../../source/SpinalHDL/Libraries/stream.rst:471
msgid "StreamFork"
msgstr "流叉"
#: ../../source/SpinalHDL/Libraries/stream.rst:473
msgid ""
"A StreamFork will clone each incoming data to all its output streams. If "
"synchronous is true, all output streams will always fire together, which "
"means that the stream will halt until all output streams are ready. If "
"synchronous is false, output streams may be ready one at a time, at the cost"
" of an additional flip flop (1 bit per output). The input stream will block "
"until all output streams have processed each item regardlessly."
msgstr ""
"StreamFork 会将每个传入数据克隆到其所有输出流。如果 synchronous 为 "
"true，则所有输出流将始终一起触发，这意味着该流将停止，直到所有输出流准备就绪。如果 synchronous 为 "
"false，则输出流可能一次准备好一个，但需要额外的触发器（每个输出 1 位）。输入流将阻塞，直到所有输出流都处理完每个项目为止。"
#: ../../source/SpinalHDL/Libraries/stream.rst:485
msgid "or"
msgstr "或者"
#: ../../source/SpinalHDL/Libraries/stream.rst:493
msgid "StreamMux"
msgstr "流复用器"
#: ../../source/SpinalHDL/Libraries/stream.rst:495
msgid ""
"A mux implementation for ``Stream``. It takes a ``select`` signal and "
"streams in ``inputs``, and returns a ``Stream`` which is connected to one of"
" the input streams specified by ``select``. ``StreamArbiter`` is a facility "
"works similar to this but is more powerful."
msgstr ""
"“Stream”的多路复用器实现。它接受一个“select”信号和“inputs”中的流，并返回一个“Stream”，该“Stream”连接到“select”指定的输入流之一。"
" “StreamArbiter” 是一个与此类似的工具，但功能更强大。"
#: ../../source/SpinalHDL/Libraries/stream.rst:507
msgid ""
"The ``UInt`` type of ``select`` signal could not be changed while output "
"stream is stalled, or it might break the transaction on the fly. Use "
"``Stream`` typed ``select`` can generate a stream interface which only fire "
"and change the routing when it is safe."
msgstr ""
"当输出流停止时，不能更改“select”信号的“UInt”类型，否则可能会动态中断事务。使用“Stream”类型的“select”可以生成一个流接口，该接口仅在安全时触发并更改路由。"
#: ../../source/SpinalHDL/Libraries/stream.rst:512
msgid "StreamDemux"
msgstr "流解复用器"
#: ../../source/SpinalHDL/Libraries/stream.rst:514
msgid ""
"A demux implementation for ``Stream``. It takes a ``input``, a ``select`` "
"and a ``portCount`` and returns a ``Vec(Stream)`` where the output stream "
"specified by ``select`` is connected to ``input``, the other output streams "
"are inactive. For safe transaction, refer the notes above."
msgstr ""
"“Stream”的解复用实现。它需要一个“input”、一个“select”和一个“portCount”并返回一个“Vec(Stream)”，其中由“select”指定的输出流连接到“input”"
" ``，其他输出流处于非活动状态。为了安全交易，请参阅上面的注释。"
#: ../../source/SpinalHDL/Libraries/stream.rst:525
msgid "StreamDispatcherSequencial"
msgstr "流调度器顺序"
#: ../../source/SpinalHDL/Libraries/stream.rst:527
msgid ""
"This util take its input stream and routes it to ``outputCount`` stream in a"
" sequential order."
msgstr "该实用程序获取其输入流并将其按顺序路由到“outputCount”流。"
#: ../../source/SpinalHDL/Libraries/stream.rst:538
msgid "Simulation support"
msgstr "模拟支持"
#: ../../source/SpinalHDL/Libraries/stream.rst:540
msgid "For simulation master and slave implementations are available:"
msgstr "对于模拟主站和从站实现可用："
#: ../../source/SpinalHDL/Libraries/stream.rst:546
msgid "Class"
msgstr "班级"
#: ../../source/SpinalHDL/Libraries/stream.rst:547
msgid "Usage"
msgstr "用法"
#: ../../source/SpinalHDL/Libraries/stream.rst:548
msgid "StreamMonitor"
msgstr "流监控器"
#: ../../source/SpinalHDL/Libraries/stream.rst:549
msgid ""
"Used for both master and slave sides, calls function with payload if Stream "
"fires."
msgstr "用于主端和从端，如果 Stream 触发，则调用带有有效负载的函数。"
#: ../../source/SpinalHDL/Libraries/stream.rst:550
msgid "StreamDriver"
msgstr "流驱动程序"
#: ../../source/SpinalHDL/Libraries/stream.rst:551
msgid ""
"Testbench master side, drives values by calling function to apply value (if "
"available). Function must return if value was available. Supports random "
"delays."
msgstr "测试平台主端，通过调用函数来应用值（如果可用）来驱动值。如果值可用，则函数必须返回。支持随机延迟。"
#: ../../source/SpinalHDL/Libraries/stream.rst:552
msgid "StreamReadyRandmizer"
msgstr "StreamReadyRandmizer"
#: ../../source/SpinalHDL/Libraries/stream.rst:553
msgid ""
"Randomizes ``ready`` for reception of data, testbench is the slave side."
msgstr "随机化“准备好”接收数据，测试平台是从属端。"
#: ../../source/SpinalHDL/Libraries/stream.rst:554
msgid "ScoreboardInOrder"
msgstr "记分牌按顺序"
#: ../../source/SpinalHDL/Libraries/stream.rst:555
msgid "Often used to compare reference/dut data"
msgstr "通常用于比较参考/待测数据"
