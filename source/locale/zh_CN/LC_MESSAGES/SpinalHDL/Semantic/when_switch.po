
msgid ""
msgstr ""
"Project-Id-Version:SpinalHDL"
"Report-Msgid-Bugs-To:"
"POT-Creation-Date:2023-12-01 11:48+0800"
"PO-Revision-Date:YEAR-MO-DA HO:MI+ZONE"
"Last-Translator:FULL NAME <EMAIL@ADDRESS>"
"Language:zh_CN"
"Language-Team:zh_CN <LL@li.org>"
"Plural-Forms:nplurals=1; plural=0;"
"MIME-Version:1.0"
"Content-Type:text/plain; charset=utf-8"
"Content-Transfer-Encoding:8bit"
"Generated-By:Babel 2.13.1"

#: ../../source/SpinalHDL/Semantic/when_switch.rst:3
msgid "When/Switch/Mux"
msgstr "何时/切换/复用器"
#: ../../source/SpinalHDL/Semantic/when_switch.rst:6
msgid "When"
msgstr "什么时候"
#: ../../source/SpinalHDL/Semantic/when_switch.rst:8
msgid ""
"As in VHDL and Verilog, signals can be conditionally assigned when a "
"specified condition is met:"
msgstr "与 VHDL 和 Verilog 中一样，当满足指定条件时可以有条件地分配信号："
#: ../../source/SpinalHDL/Semantic/when_switch.rst:22
msgid ""
"If the keyword ``otherwise`` is on the same line as the closing bracket "
"``}`` of the ``when`` condition, no dot is needed."
msgstr "如果关键字“otherwise”与“when”条件的右括号“}”在同一行，则不需要点。"
#: ../../source/SpinalHDL/Semantic/when_switch.rst:32
msgid "But if ``.otherwise`` is on another line, a dot is **required**:"
msgstr "但如果“.otherwise”在另一行，则**需要**一个点："
#: ../../source/SpinalHDL/Semantic/when_switch.rst:44
msgid "Switch"
msgstr "转变"
#: ../../source/SpinalHDL/Semantic/when_switch.rst:46
msgid ""
"As in VHDL and Verilog, signals can be conditionally assigned when a signal "
"has a defined value:"
msgstr "与 VHDL 和 Verilog 中一样，当信号具有定义的值时，可以有条件地分配信号："
#: ../../source/SpinalHDL/Semantic/when_switch.rst:62
msgid ""
"``is`` clauses can be factorized by separating them with a comma "
"``is(value1, value2)``."
msgstr "``is`` 子句可以通过用逗号``is(value1, value2)`` 分隔来分解。"
#: ../../source/SpinalHDL/Semantic/when_switch.rst:65
#: ../../source/SpinalHDL/Semantic/when_switch.rst:187
msgid "Example"
msgstr "例子"
#: ../../source/SpinalHDL/Semantic/when_switch.rst:87
msgid "is equivalent to"
msgstr "相当于"
#: ../../source/SpinalHDL/Semantic/when_switch.rst:102
msgid "Additional options"
msgstr "其他选项"
#: ../../source/SpinalHDL/Semantic/when_switch.rst:104
msgid ""
"By default, SpinalHDL will generate an \"UNREACHABLE DEFAULT STATEMENT\" "
"error if a ``switch`` contains a ``default`` statement while all the "
"possible logical values of the ``switch`` are already covered by the ``is`` "
"statements. You can drop this error reporting by specifying `` "
"switch(myValue, coverUnreachable = true) { ... }``."
msgstr ""
"默认情况下，如果“switch”包含“default”语句，而“switch”的所有可能的逻辑值都已被“覆盖”，SpinalHDL "
"将生成“无法访问的默认语句”错误。是`语句。您可以通过指定`` switch(myValue, coverUnreachable = true) { "
"... }`` 来删除此错误报告。"
#: ../../source/SpinalHDL/Semantic/when_switch.rst:118
msgid ""
"This check is done on the logical values, not on the physical values. For "
"instance, if you have a SpinalEnum(A,B,C) encoded in a on-hot manner, "
"SpinalHDL will only care about the A,B,C values (\"001\" \"010\" \"100\"). "
"Pyhsical values as \"000\" \"011\" \"101\" \"110\" \"111\" will not be taken"
" in account."
msgstr ""
"此检查是针对逻辑值而不是物理值进行的。例如，如果您有一个以热方式编码的 SpinalEnum(A,B,C)，SpinalHDL 将只关心 A,B,C 值"
" (\"001\" \"010\" \"100\\ ”）。物理值“000”“011”“101”“110”“111”将不被考虑。"
#: ../../source/SpinalHDL/Semantic/when_switch.rst:121
msgid ""
"By default, SpinalHDL will generate a \"DUPLICATED ELEMENTS IN SWITCH "
"IS(...) STATEMENT\" error if a given ``is`` statement provides multiple "
"times the same value. For instance ``is(42,42) { ... }`` You can drop this "
"error reporting by specifying ``switch(myValue, strict = true){ ... }``. "
"SpinalHDL will then take care of removing duplicated values."
msgstr ""
"默认情况下，如果给定的“is”语句多次提供相同的值，SpinalHDL 将生成“DUPLICATED ELEMENTS IN SWITCH "
"IS(...) STATEMENT”错误。例如 ``is(42,42) { ... }`` 您可以通过指定 ``switch(myValue, "
"strict = true){ ... }`` 来删除此错误报告。 SpinalHDL 然后将负责删除重复的值。"
#: ../../source/SpinalHDL/Semantic/when_switch.rst:134
msgid "Local declaration"
msgstr "当地申报"
#: ../../source/SpinalHDL/Semantic/when_switch.rst:136
msgid "It is possible to define new signals inside a when/switch statement:"
msgstr "可以在 when/switch 语句中定义新信号："
#: ../../source/SpinalHDL/Semantic/when_switch.rst:153
msgid ""
"SpinalHDL checks that signals defined inside a scope are only assigned "
"inside that scope."
msgstr "SpinalHDL 检查范围内定义的信号是否仅在该范围内分配。"
#: ../../source/SpinalHDL/Semantic/when_switch.rst:156
msgid "Mux"
msgstr "多路复用器"
#: ../../source/SpinalHDL/Semantic/when_switch.rst:158
msgid ""
"If you just need a ``Mux`` with a ``Bool`` selection signal, there are two "
"equivalent syntaxes:"
msgstr "如果您只需要一个带有“Bool”选择信号的“Mux”，则有两种等效的语法："
#: ../../source/SpinalHDL/Semantic/when_switch.rst:164
msgid "Syntax"
msgstr "句法"
#: ../../source/SpinalHDL/Semantic/when_switch.rst:165
msgid "Return"
msgstr "返回"
#: ../../source/SpinalHDL/Semantic/when_switch.rst:166
msgid "Description"
msgstr "描述"
#: ../../source/SpinalHDL/Semantic/when_switch.rst:167
msgid "Mux(cond, whenTrue, whenFalse)"
msgstr "Mux（条件，当True，当False）"
#: ../../source/SpinalHDL/Semantic/when_switch.rst:168
#: ../../source/SpinalHDL/Semantic/when_switch.rst:171
msgid "T"
msgstr "时间"
#: ../../source/SpinalHDL/Semantic/when_switch.rst:169
#: ../../source/SpinalHDL/Semantic/when_switch.rst:172
msgid "Return ``whenTrue`` when ``cond`` is True, ``whenFalse`` otherwise"
msgstr "当“cond”为 True 时返回“whenTrue”，否则返回“whenFalse”"
#: ../../source/SpinalHDL/Semantic/when_switch.rst:170
msgid "cond ? whenTrue | whenFalse"
msgstr "条件 ？当为真时 |当为假时"
#: ../../source/SpinalHDL/Semantic/when_switch.rst:182
msgid "Bitwise selection"
msgstr "按位选择"
#: ../../source/SpinalHDL/Semantic/when_switch.rst:184
msgid "A bitwise selection looks like the VHDL ``when`` syntax."
msgstr "按位选择看起来像 VHDL ``when`` 语法。"
#: ../../source/SpinalHDL/Semantic/when_switch.rst:199
msgid ""
"``mux`` checks that all possible values are covered to prevent generation of"
" latches. If all possible values are covered, the default statement must not"
" be added:"
msgstr "``mux`` 检查所有可能的值是否都被覆盖以防止锁存器的生成。如果覆盖了所有可能的值，则不得添加default语句："
#: ../../source/SpinalHDL/Semantic/when_switch.rst:212
msgid ""
"``muxList(...)`` and ``muxListDc(...)`` are alternatives bitwise selectors "
"that take a sequence of tuples or mappings as input."
msgstr "``muxList(...)`` 和 ``muxListDc(...)`` 是替代的按位选择器，它们采用元组或映射序列作为输入。"
#: ../../source/SpinalHDL/Semantic/when_switch.rst:214
msgid ""
"``muxList`` can be used as a direct replacement for ``mux``, providing a "
"easier to use interface in code that generates the cases. It has the same "
"checking behavior as ``mux`` does, requiring full coverage and prohibiting "
"listing a default if it is not needed."
msgstr ""
"``muxList`` 可以用作``mux`` "
"的直接替代品，在生成案例的代码中提供更易于使用的接口。它具有与“mux”相同的检查行为，要求完全覆盖并在不需要时禁止列出默认值。"
#: ../../source/SpinalHDL/Semantic/when_switch.rst:217
msgid ""
"``muxtListDc`` can be used if the uncovered values are not important, they "
"can be left unassigned by using ``muxListDc``. This will add a default case "
"if needed. This default case will generate X's during the simulation if ever"
" encountered. ``muxListDc(...)`` is often a good alternative in generic "
"code."
msgstr ""
"如果未覆盖的值不重要，则可以使用“muxtListDc”，可以使用“muxListDc”将它们保留为未分配状态。如果需要，这将添加默认情况。如果遇到这种默认情况，将在模拟过程中生成"
" X。在通用代码中，``muxListDc(...)`` 通常是一个很好的替代方法。"
#: ../../source/SpinalHDL/Semantic/when_switch.rst:221
msgid "Below is an example of dividing a ``Bits`` of 128 bits into 32 bits:"
msgstr "下面是将 128 位的“Bits”划分为 32 位的示例："
#: ../../source/SpinalHDL/Semantic/when_switch.rst:238
msgid ""
"Example for ``muxListDc`` selecting bits from a configurable width vector:"
msgstr "从可配置宽度向量中选择位的“muxListDc”示例："
