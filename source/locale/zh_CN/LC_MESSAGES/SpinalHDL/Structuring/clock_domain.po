
msgid ""
msgstr ""
"Project-Id-Version:SpinalHDL"
"Report-Msgid-Bugs-To:"
"POT-Creation-Date:2023-12-01 11:48+0800"
"PO-Revision-Date:YEAR-MO-DA HO:MI+ZONE"
"Last-Translator:FULL NAME <EMAIL@ADDRESS>"
"Language:zh_CN"
"Language-Team:zh_CN <LL@li.org>"
"Plural-Forms:nplurals=1; plural=0;"
"MIME-Version:1.0"
"Content-Type:text/plain; charset=utf-8"
"Content-Transfer-Encoding:8bit"
"Generated-By:Babel 2.13.1"

#: ../../source/SpinalHDL/Structuring/clock_domain.rst:4
msgid "Clock domains"
msgstr "时钟域"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:7
msgid "Introduction"
msgstr "介绍"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:9
msgid ""
"In SpinalHDL, clock and reset signals can be combined to create a **clock "
"domain**. Clock domains can be applied to some areas of the design and then "
"all synchronous elements instantiated into those areas will then "
"**implicitly** use this clock domain."
msgstr ""
"在 SpinalHDL "
"中，时钟和复位信号可以组合起来创建**时钟域**。时钟域可以应用于设计的某些区域，然后实例化到这些区域中的所有同步元件将**隐式**使用该时钟域。"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:11
msgid ""
"Clock domain application works like a stack, which means that if you are in "
"a given clock domain you can still apply another clock domain locally."
msgstr "时钟域应用程序的工作方式类似于堆栈，这意味着如果您位于给定时钟域中，您仍然可以在本地应用另一个时钟域。"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:13
msgid ""
"Please note that a register captures its clock domain when the register is "
"created, not when it is assigned. So please make sure to create them inside "
"the desired ``ClockingArea``."
msgstr "请注意，寄存器在创建时捕获其时钟域，而不是在分配时捕获。因此，请确保在所需的“ClockingArea”内创建它们。"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:18
msgid "Instantiation"
msgstr "实例化"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:20
msgid "The syntax to define a clock domain is as follows (using EBNF syntax):"
msgstr "定义时钟域的语法如下（使用EBNF语法）："
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:33
msgid "This definition takes five parameters:"
msgstr "这个定义有五个参数："
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:39
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:194
msgid "Argument"
msgstr "争论"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:40
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:195
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:330
msgid "Description"
msgstr "描述"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:41
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:196
msgid "Default"
msgstr "默认"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:42
msgid "``clock``"
msgstr "``时钟``"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:43
msgid "Clock signal that defines the domain"
msgstr "定义域的时钟信号"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:45
msgid "``reset``"
msgstr "``重置``"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:46
msgid ""
"Reset signal. If a register exists which needs a reset and the clock domain "
"doesn't provide one, an error message will be displayed"
msgstr "复位信号。如果存在需要复位的寄存器，而时钟域没有提供复位，则会显示错误消息"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:47
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:50
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:53
msgid "null"
msgstr "无效的"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:48
msgid "``softReset``"
msgstr "``软重置``"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:49
msgid "Reset which infers an additional synchronous reset"
msgstr "复位意味着额外的同步复位"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:51
msgid "``clockEnable``"
msgstr "``时钟启用``"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:52
msgid ""
"The goal of this signal is to disable the clock on the whole clock domain "
"without having to manually implement that on each synchronous element"
msgstr "该信号的目标是禁用整个时钟域上的时钟，而无需在每个同步元件上手动实现"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:54
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:212
msgid "``frequency``"
msgstr "``频率``"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:55
msgid ""
"Allows you to specify the frequency of the given clock domain and later read"
" it in your design"
msgstr "允许您指定给定时钟域的频率，然后在您的设计中读取它"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:56
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:214
msgid "UnknownFrequency"
msgstr "未知频率"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:57
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:200
msgid "``config``"
msgstr "``配置``"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:58
msgid "Specify the polarity of signals and the nature of the reset"
msgstr "指定信号的极性和复位的性质"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:59
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:202
msgid "Current config"
msgstr "当前配置"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:62
msgid ""
"An applied example to define a specific clock domain within the design is as"
" follows:"
msgstr "在设计中定义特定时钟域的应用示例如下："
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:77
msgid ""
"When an `Area` is not needed, it is also possible to apply the clock domain "
"directly. Two syntaxes exist:"
msgstr "当不需要“Area”时，也可以直接应用时钟域。存在两种语法："
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:103
msgid "Configuration"
msgstr "配置"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:105
msgid ""
"In addition to :ref:`constructor parameters <clock_domain_instantiation>`\\ "
", the following elements of each clock domain are configurable via a "
"``ClockDomainConfig``\\ class:"
msgstr ""
"除了 :ref:` 构造函数参数 <clock_domain_instantiation>`\\ 之外，每个时钟域的以下元素都可以通过 "
"``ClockDomainConfig``\\ 类进行配置："
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:111
msgid "Property"
msgstr "财产"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:112
msgid "Valid values"
msgstr "有效值"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:113
msgid "``clockEdge``"
msgstr "``时钟边缘``"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:114
msgid "``RISING``\\ , ``FALLING``"
msgstr "“上升”、“下降”"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:115
msgid "``resetKind``"
msgstr "``重置种类``"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:116
msgid ""
"``ASYNC``\\ , ``SYNC``\\ , and ``BOOT`` which is supported by some FPGAs "
"(where FF values are loaded by the bitstream)"
msgstr "某些 FPGA 支持的 ``ASYNC``\\ 、 ``SYNC``\\ 和 ``BOOT`` （其中 FF 值由比特流加载）"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:117
msgid "``resetActiveLevel``"
msgstr "``重置活动级别``"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:118
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:120
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:122
msgid "``HIGH``\\ , ``LOW``"
msgstr "“高”、“低”"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:119
msgid "``softResetActiveLevel``"
msgstr "``软重置活动级别``"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:121
msgid "``clockEnableActiveLevel``"
msgstr "``clockEnableActiveLevel``"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:155
msgid ""
"By default, a ``ClockDomain`` is applied to the whole design. The "
"configuration of this default domain is:"
msgstr "默认情况下，“ClockDomain”应用于整个设计。该默认域的配置为："
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:158
msgid "Clock : rising edge"
msgstr "时钟：上升沿"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:159
msgid "Reset : asynchronous, active high"
msgstr "复位：异步，高电平有效"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:160
msgid "No clock enable"
msgstr "无时钟使能"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:162
msgid "This corresponds to the following ``ClockDomainConfig``:"
msgstr "这对应于以下“ClockDomainConfig”："
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:173
msgid "Internal clock"
msgstr "内部时钟"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:175
msgid "An alternative syntax to create a clock domain is the following:"
msgstr "创建时钟域的替代语法如下："
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:188
msgid "This definition takes six parameters:"
msgstr "该定义有六个参数："
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:197
msgid "``name``"
msgstr "``名字``"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:198
msgid "Name of `clk` and `reset` signal"
msgstr "`clk` 和 `reset` 信号的名称"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:201
msgid "Specify polarity of signals and the nature of the reset"
msgstr "指定信号的极性和复位的性质"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:203
msgid "``withReset``"
msgstr "``withReset``"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:204
msgid "Add a reset signal"
msgstr "添加复位信号"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:205
msgid "true"
msgstr "真的"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:206
msgid "``withSoftReset``"
msgstr "``带软重置``"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:207
msgid "Add a soft reset signal"
msgstr "添加软复位信号"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:208
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:211
msgid "false"
msgstr "错误的"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:209
msgid "``withClockEnable``"
msgstr "``withClockEnable``"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:210
msgid "Add a clock enable"
msgstr "添加时钟使能"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:213
msgid "Frequency of the clock domain"
msgstr "时钟域频率"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:217
msgid ""
"The advantage of this approach is to create clock and reset signals with a "
"known/specified name instead of an inherited one."
msgstr "这种方法的优点是使用已知/指定的名称而不是继承的名称来创建时钟和复位信号。"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:219
msgid ""
"Once created, you have to assign the ``ClockDomain``'s signals, as shown in "
"the example below:"
msgstr "创建后，您必须分配“ClockDomain”的信号，如下例所示："
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:251
msgid "External clock"
msgstr "外部时钟"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:253
msgid ""
"You can define a clock domain which is driven by the outside anywhere in "
"your source. It will then automatically add clock and reset wires from the "
"top level inputs to all synchronous elements."
msgstr "您可以在源中的任何位置定义由外部驱动的时钟域。然后，它会自动将时钟和复位线从顶层输入添加到所有同步元件。"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:266
msgid ""
"The arguments to the ``ClockDomain.external`` function are exactly the same "
"as in the ``ClockDomain.internal`` function. Below is an example of a design"
" using ``ClockDomain.external``:"
msgstr ""
"“ClockDomain.external” 函数的参数与“ClockDomain.internal” "
"函数中的参数完全相同。下面是使用“ClockDomain.external”的设计示例："
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:288
msgid "Signal priorities in HDL generation"
msgstr "HDL 生成中的信号优先级"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:290
msgid ""
"In the current version, reset and clock enable signals have different "
"priorities. Their order is : ``asyncReset``, ``clockEnable``, ``syncReset`` "
"and ``softReset``."
msgstr ""
"在当前版本中，复位和时钟使能信号具有不同的优先级。它们的顺序是：“asyncReset”、“clockEnable”、“syncReset”和“softReset”。"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:292
msgid ""
"Please be careful that clockEnable has a higher priority than syncReset. If "
"you do a sync reset when the clockEnable is disabled (especially at the "
"beginning of a simulation), the gated registers will not be reseted."
msgstr ""
"请注意，clockEnable "
"的优先级高于syncReset。如果在禁用clockEnable（尤其是在模拟开始时）时执行同步重置，则门控寄存器将不会重置。"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:294
msgid "Here is an example:"
msgstr "这是一个例子："
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:302
msgid "It will generate VerilogHDL codes like:"
msgstr "它将生成 Verilog HDL 代码，例如："
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:316
msgid ""
"If that behaviour is problematic, one workaround is to use a when statement "
"as a clock enable instead of using the ClockDomain.enable feature. This is "
"open for future improvements."
msgstr ""
"如果该行为有问题，一种解决方法是使用when 语句作为时钟启用，而不是使用ClockDomain.enable 功能。这对于未来的改进是开放的。"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:319
msgid "Context"
msgstr "语境"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:321
msgid ""
"You can retrieve in which clock domain you are by calling "
"``ClockDomain.current`` anywhere."
msgstr "您可以通过在任何地方调用“ClockDomain.current”来检索您所在的时钟域。"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:323
msgid ""
"The returned ``ClockDomain`` instance has the following functions that can "
"be called:"
msgstr "返回的“ClockDomain”实例具有以下可以调用的函数："
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:329
msgid "name"
msgstr "姓名"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:331
msgid "Return"
msgstr "返回"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:332
msgid "frequency.getValue"
msgstr "频率.getValue"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:333
msgid "Return the frequency of the clock domain"
msgstr "返回时钟域的频率"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:334
msgid "Double"
msgstr "双倍的"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:335
msgid "hasReset"
msgstr "已重置"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:336
msgid "Return if the clock domain has a reset signal"
msgstr "如果时钟域有复位信号则返回"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:337
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:340
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:343
msgid "Boolean"
msgstr "布尔值"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:338
msgid "hasSoftReset"
msgstr "有软复位"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:339
msgid "Return if the clock domain has a soft reset signal"
msgstr "返回时钟域是否有软复位信号"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:341
msgid "hasClockEnable"
msgstr "有时钟启用"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:342
msgid "Return if the clock domain has a clock enable signal"
msgstr "返回时钟域是否有时钟使能信号"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:344
msgid "readClockWire"
msgstr "读时钟线"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:345
msgid "Return a signal derived from the clock signal"
msgstr "返回从时钟信号派生的信号"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:346
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:349
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:352
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:355
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:358
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:361
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:364
msgid "Bool"
msgstr "布尔"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:347
msgid "readResetWire"
msgstr "读复位线"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:348
msgid "Return a signal derived from the soft reset signal"
msgstr "返回从软复位信号派生的信号"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:350
msgid "readSoftResetWire"
msgstr "读软复位线"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:351
msgid "Return a signal derived from the reset signal"
msgstr "返回从复位信号派生的信号"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:353
msgid "readClockEnableWire"
msgstr "读时钟使能线"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:354
msgid "Return a signal derived from the clock enable signal"
msgstr "返回源自时钟使能信号的信号"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:356
msgid "isResetActive"
msgstr "是否处于重置活动状态"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:357
msgid "Return True when the reset is active"
msgstr "当重置有效时返回 True"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:359
msgid "isSoftResetActive"
msgstr "软复位激活"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:360
msgid "Return True when the soft reset is active"
msgstr "当软复位有效时返回 True"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:362
msgid "isClockEnableActive"
msgstr "时钟启用活动"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:363
msgid "Return True when the clock enable is active"
msgstr "当时钟使能有效时返回 True"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:367
msgid ""
"An example is included below where a UART controller uses the frequency "
"specification to set its clock divider:"
msgstr "下面包含一个示例，其中 UART 控制器使用频率规范来设置其时钟分频器："
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:379
msgid "Clock domain crossing"
msgstr "时钟域交叉"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:381
msgid ""
"SpinalHDL checks at compile time that there are no unwanted/unspecified "
"cross clock domain signal reads. If you want to read a signal that is "
"emitted by another ``ClockDomain`` area, you should add the "
"``crossClockDomain`` tag to the destination signal as depicted in the "
"following example:"
msgstr ""
"SpinalHDL "
"在编译时检查是否存在不需要的/未指定的跨时钟域信号读取。如果您想读取另一个“ClockDomain”区域发出的信号，则应将“crossClockDomain”标记添加到目标信号，如下例所示："
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:443
msgid ""
"In general, you can use 2 or more flip-flop driven by the destination clock "
"domain to prevent metastability. The ``BufferCC(input: T, init: T = null, "
"bufferDepth: Int = 2)`` function provided in ``spinal.lib._`` will "
"instantiate the necessary flip-flops (the number of flip-flops will depends "
"on the ``bufferDepth`` parameter) to mitigate the phenomena."
msgstr ""
"一般来说，可以使用2个或更多由目标时钟域驱动的触发器来防止亚稳态。 ``spinal.lib._`` 中提供的 ``BufferCC(input: T,"
" init: T = null, bufferDepth: Int = 2)`` "
"函数将实例化必要的触发器（触发器的数量将取决于“bufferDepth”参数）来减轻这种现象。"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:467
msgid ""
"The ``BufferCC`` function is only for signals of type ``Bit``, or ``Bits`` "
"operating as Gray-coded counters (only 1 bit-flip per clock cycle), and can "
"not used for multi-bit cross-domain processes. For multi-bit cases, it is "
"recommended to use ``StreamFifoCC`` for high bandwidth requirements, or use "
"``StreamCCByToggle`` to reduce resource usage in cases where bandwidth is "
"not critical."
msgstr ""
"“BufferCC”功能仅适用于“Bit”类型的信号，或作为格雷编码计数器运行的“Bits”信号（每个时钟周期仅翻转 1 "
"位），并且不能用于多位跨域进程。对于多位情况，建议使用“StreamFifoCC”来满足高带宽要求，或者在带宽要求不高的情况下使用“StreamCCByToggle”来减少资源使用。"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:470
msgid "Special clocking Areas"
msgstr "特殊计时区域"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:473
msgid "Slow Area"
msgstr "慢区"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:475
msgid ""
"A ``SlowArea`` is used to create a new clock domain area which is slower "
"than the current one:"
msgstr "“SlowArea” 用于创建一个比当前时钟域慢的新时钟域区域："
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:504
msgid "BootReset"
msgstr "启动重置"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:506
msgid ""
"`clockDomain.withBootReset()` could specify register's resetkinde as boot. "
"`clockDomain.withSyncReset()` could specify register's resetkinde as Sync-"
"reset."
msgstr ""
"`clockDomain.withBootReset()` 可以指定寄存器的重置类型为启动。 `clockDomain.withSyncReset()`"
" 可以指定寄存器的重置类型为同步重置。"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:524
msgid "ResetArea"
msgstr "重置区域"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:526
msgid ""
"A ``ResetArea`` is used to create a new clock domain area where a special "
"reset signal is combined with the current clock domain reset:"
msgstr "“ResetArea”用于创建一个新的时钟域区域，其中特殊的复位信号与当前时钟域复位相结合："
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:546
msgid "ClockEnableArea"
msgstr "时钟使能区"
#: ../../source/SpinalHDL/Structuring/clock_domain.rst:548
msgid ""
"A ``ClockEnableArea`` is used to add an additional clock enable in the "
"current clock domain:"
msgstr "“ClockEnableArea”用于在当前时钟域中添加额外的时钟使能："
