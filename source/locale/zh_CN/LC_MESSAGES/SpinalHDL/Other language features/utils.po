
msgid ""
msgstr ""
"Project-Id-Version:SpinalHDL"
"Report-Msgid-Bugs-To:"
"POT-Creation-Date:2023-12-01 11:48+0800"
"PO-Revision-Date:YEAR-MO-DA HO:MI+ZONE"
"Last-Translator:FULL NAME <EMAIL@ADDRESS>"
"Language:zh_CN"
"Language-Team:zh_CN <LL@li.org>"
"Plural-Forms:nplurals=1; plural=0;"
"MIME-Version:1.0"
"Content-Type:text/plain; charset=utf-8"
"Content-Transfer-Encoding:8bit"
"Generated-By:Babel 2.13.1"

#: ../../source/SpinalHDL/Other features/utils.rst:7 language
msgid "Utils"
msgstr "实用程序"
#: ../../source/SpinalHDL/Other features/utils.rst:10 language
msgid "General"
msgstr "一般的"
#: ../../source/SpinalHDL/Other features/utils.rst:12 language
msgid ""
"Many tools and utilities are present in :ref:`spinal.lib <lib_introduction>`"
" but some are already present in the SpinalHDL Core."
msgstr ""
"许多工具和实用程序都存在于 :ref:`spinal.lib <lib_introduction>` 中，但有些工具和实用程序已经存在于 "
"SpinalHDL Core 中。"
#: ../../source/SpinalHDL/Other features/utils.rst:18 language
msgid "Syntax"
msgstr "句法"
#: ../../source/SpinalHDL/Other features/utils.rst:19 language
msgid "Return"
msgstr "返回"
#: ../../source/SpinalHDL/Other features/utils.rst:20 language
msgid "Description"
msgstr "描述"
#: ../../source/SpinalHDL/Other features/utils.rst:21 language
msgid "``widthOf(x : BitVector)``"
msgstr "``widthOf(x：位向量)``"
#: ../../source/SpinalHDL/Other features/utils.rst:22 features/utils.rst:25
#: language
msgid "Int"
msgstr "INT"
#: ../../source/SpinalHDL/Other features/utils.rst:23 language
msgid "Return the width of a Bits/UInt/SInt signal"
msgstr "返回 Bits/UInt/SInt 信号的宽度"
#: ../../source/SpinalHDL/Other features/utils.rst:24 language
msgid "``log2Up(x : BigInt)``"
msgstr "``log2Up(x：BigInt)``"
#: ../../source/SpinalHDL/Other features/utils.rst:26 language
msgid "Return the number of bits needed to represent ``x`` states"
msgstr "返回表示“x”状态所需的位数"
#: ../../source/SpinalHDL/Other features/utils.rst:27 language
msgid "``isPow2(x : BigInt)``"
msgstr "``isPow2(x：BigInt)``"
#: ../../source/SpinalHDL/Other features/utils.rst:28 language
msgid "Boolean"
msgstr "布尔值"
#: ../../source/SpinalHDL/Other features/utils.rst:29 language
msgid "Return true if ``x`` is a power of two"
msgstr "如果“x”是 2 的幂，则返回 true"
#: ../../source/SpinalHDL/Other features/utils.rst:30 language
msgid "``roundUp(that : BigInt, by : BigInt)``"
msgstr "``roundUp（即：BigInt，作者：BigInt）``"
#: ../../source/SpinalHDL/Other features/utils.rst:31 language
msgid "BigInt"
msgstr "大整型"
#: ../../source/SpinalHDL/Other features/utils.rst:32 language
msgid "Return the first ``by`` multiply from ``that`` (included)"
msgstr "返回第一个 ``by`` 乘以 ``that`` （包含）"
#: ../../source/SpinalHDL/Other features/utils.rst:33 language
msgid "``Cat(x : Data*)``"
msgstr "``猫（x：数据*）``"
#: ../../source/SpinalHDL/Other features/utils.rst:34 language
msgid "Bits"
msgstr "位"
#: ../../source/SpinalHDL/Other features/utils.rst:35 language
msgid "Concatenate all arguments, the first in MSB, the last in LSB"
msgstr "连接所有参数，第一个在 MSB，最后一个在 LSB"
#: ../../source/SpinalHDL/Other features/utils.rst:39 language
msgid "Cloning hardware datatypes"
msgstr "克隆硬件数据类型"
#: ../../source/SpinalHDL/Other features/utils.rst:41 language
msgid ""
"You can clone a given hardware data type by using the ``cloneOf(x)`` "
"function. It will return a new instance of the same Scala type and "
"parameters."
msgstr "您可以使用“cloneOf(x)”函数克隆给定的硬件数据类型。它将返回相同 Scala 类型和参数的新实例。"
#: ../../source/SpinalHDL/Other features/utils.rst:44 language
msgid "For example:"
msgstr "例如："
#: ../../source/SpinalHDL/Other features/utils.rst:58 language
msgid ""
"You can get more information about how hardware data types are managed on "
"the :ref:`Hardware types page <hardware_type>`."
msgstr "您可以在硬件类型页面 <hardware_type> 上获取有关如何管理硬件数据类型的更多信息。"
#: ../../source/SpinalHDL/Other features/utils.rst:61 language
msgid ""
"If you use the ``cloneOf`` function on a ``Bundle``, this ``Bundle`` should "
"be a ``case class`` or should override the clone function internally."
msgstr ""
"如果你在“Bundle”上使用“cloneOf”函数，这个“Bundle”应该是一个“case class”或者应该在内部重写clone函数。"
#: ../../source/SpinalHDL/Other features/utils.rst:65 language
msgid "Passing a datatype as construction parameter"
msgstr "将数据类型作为构造函数参数传递"
#: ../../source/SpinalHDL/Other features/utils.rst:67 language
msgid ""
"Many pieces of reusable hardware need to be parameterized by some data type."
" For example if you want to define a FIFO or a shift register, you need a "
"parameter to specify which kind of payload you want for the component."
msgstr "许多可重用硬件需要通过某种数据类型进行参数化。例如，如果您想定义 FIFO 或移位寄存器，则需要一个参数来指定组件所需的有效负载类型。"
#: ../../source/SpinalHDL/Other features/utils.rst:70 language
msgid "There are two similar ways to do this."
msgstr "有两种类似的方法可以做到这一点。"
#: ../../source/SpinalHDL/Other features/utils.rst:73 language
msgid "The old way"
msgstr "老办法"
#: ../../source/SpinalHDL/Other features/utils.rst:75 language
msgid ""
"A good example of the old way to do this is in this definition of a "
"``ShiftRegister`` component:"
msgstr "旧方法的一个很好的例子是“ShiftRegister”组件的定义："
#: ../../source/SpinalHDL/Other features/utils.rst:87 language
msgid "And here is how you can instantiate the component:"
msgstr "以下是实例化该组件的方法："
#: ../../source/SpinalHDL/Other features/utils.rst:93 language
msgid ""
"As you can see, the raw hardware type is directly passed as a construction "
"parameter. Then each time you want to create an new instance of that kind of"
" hardware data type, you need to use the ``cloneOf(...)`` function. Doing "
"things this way is not super safe as it's easy to forget to use ``cloneOf``."
msgstr ""
"如您所见，原始硬件类型直接作为构造参数传递。然后每次你想创建这种硬件数据类型的新实例时，你需要使用``cloneOf(...)``函数。以这种方式做事并不是超级安全，因为很容易忘记使用``cloneOf``。"
#: ../../source/SpinalHDL/Other features/utils.rst:98 language
msgid "The safe way"
msgstr "安全的方法"
#: ../../source/SpinalHDL/Other features/utils.rst:100 language
msgid ""
"An example of the safe way to pass a data type parameter is as follows:"
msgstr "传递数据类型参数的安全方法的示例如下："
#: ../../source/SpinalHDL/Other features/utils.rst:112 language
msgid ""
"And here is how you instantiate the component (exactly the same as before):"
msgstr "以下是实例化组件的方法（与之前完全相同）："
#: ../../source/SpinalHDL/Other features/utils.rst:118 language
msgid ""
"Notice how the example above uses a ``HardType`` wrapper around the raw data"
" type ``T``, which is a \"blueprint\" definition of a hardware data type. "
"This way of doing things is easier to use than the \"old way\", because to "
"create a new instance of the hardware data type you only need to call the "
"``apply`` function of that ``HardType`` (or in other words, just add "
"parentheses after the parameter)."
msgstr ""
"请注意上面的示例如何在原始数据类型“T”周围使用“HardType”包装器，这是硬件数据类型的“蓝图”定义。这种做事方式比“旧方式”更容易使用，因为要创建硬件数据类型的新实例，您只需要调用该“HardType”（或换句话说，只需在参数后面添加括号即可）。"
#: ../../source/SpinalHDL/Other features/utils.rst:121 language
msgid ""
"Additionally, this mechanism is completely transparent from the point of "
"view of the user, as a hardware data type can be implicitly converted into a"
" ``HardType``."
msgstr "此外，从用户的角度来看，这种机制是完全透明的，因为硬件数据类型可以隐式转换为“HardType”。"
#: ../../source/SpinalHDL/Other features/utils.rst:124 language
msgid "Frequency and time"
msgstr "频率和时间"
#: ../../source/SpinalHDL/Other features/utils.rst:126 language
msgid "SpinalHDL has a dedicated syntax to define frequency and time values:"
msgstr "SpinalHDL 有专用语法来定义频率和时间值："
#: ../../source/SpinalHDL/Other features/utils.rst:137 language
msgid ""
"For time definitions you can use following postfixes to get a "
"``TimeNumber``:"
msgstr "对于时间定义，您可以使用以下后缀来获取“TimeNumber”："
#: ../../source/SpinalHDL/Other features/utils.rst:138 language
msgid "``fs``, ``ps``, ``ns``, ``us``, ``ms``, ``sec``, ``mn``, ``hr``"
msgstr "``fs``、``ps``、``ns``、``us``、``ms``、``sec``、``mn``、``hr``"
#: ../../source/SpinalHDL/Other features/utils.rst:140 language
msgid ""
"For time definitions you can use following postfixes to get a "
"``HertzNumber``:"
msgstr "对于时间定义，您可以使用以下后缀来获取“赫兹数”："
#: ../../source/SpinalHDL/Other features/utils.rst:141 language
msgid "``Hz``, ``KHz``, ``MHz``, ``GHz``, ``THz``"
msgstr "“Hz”、“KHz”、“MHz”、“GHz”、“太赫兹”"
#: ../../source/SpinalHDL/Other features/utils.rst:143 language
msgid ""
"``TimeNumber`` and ``HertzNumber`` are based on the ``PhysicalNumber`` class"
" which use  scala ``BigDecimal`` to store numbers."
msgstr ""
"``TimeNumber`` 和 ``HertzNumber`` 是基于 ``PhysicalNumber`` 类，它使用 scala "
"``BigDecimal`` 来存储数字。"
#: ../../source/SpinalHDL/Other features/utils.rst:146 language
msgid "Binary prefix"
msgstr "二进制前缀"
#: ../../source/SpinalHDL/Other features/utils.rst:148 language
msgid ""
"SpinalHDL allows the definition of integer numbers using binary prefix "
"notation according to IEC."
msgstr "SpinalHDL 允许根据 IEC 使用二进制前缀表示法定义整数。"
#: ../../source/SpinalHDL/Other features/utils.rst:155 language
msgid "The following binary prefix notations are available:"
msgstr "可以使用以下二进制前缀表示法："
#: ../../source/SpinalHDL/Other features/utils.rst:161 language
msgid "Binary Prefix"
msgstr "二进制前缀"
#: ../../source/SpinalHDL/Other features/utils.rst:162 language
msgid "Value"
msgstr "价值"
#: ../../source/SpinalHDL/Other features/utils.rst:163 language
msgid "Byte, Bytes"
msgstr "字节，字节"
#: ../../source/SpinalHDL/Other features/utils.rst:164 language
msgid "1"
msgstr "1"
#: ../../source/SpinalHDL/Other features/utils.rst:165 language
msgid "KiB"
msgstr "基布"
#: ../../source/SpinalHDL/Other features/utils.rst:166 language
msgid "1024 == 1 << 10"
msgstr "1024==1<<10"
#: ../../source/SpinalHDL/Other features/utils.rst:167 language
msgid "MiB"
msgstr "米布"
#: ../../source/SpinalHDL/Other features/utils.rst:168 language
msgid "1024\\ :sup:`2` == 1 << 20"
msgstr "1024\\:sup:`2` == 1 << 20"
#: ../../source/SpinalHDL/Other features/utils.rst:169 language
msgid "GiB"
msgstr "吉布"
#: ../../source/SpinalHDL/Other features/utils.rst:170 language
msgid "1024\\ :sup:`3` == 1 << 30"
msgstr "1024\\:sup:`3` == 1 << 30"
#: ../../source/SpinalHDL/Other features/utils.rst:171 language
msgid "TiB"
msgstr "硼化钛"
#: ../../source/SpinalHDL/Other features/utils.rst:172 language
msgid "1024\\ :sup:`4` == 1 << 40"
msgstr "1024\\ :sup:`4` == 1 << 40"
#: ../../source/SpinalHDL/Other features/utils.rst:173 language
msgid "PiB"
msgstr "皮B"
#: ../../source/SpinalHDL/Other features/utils.rst:174 language
msgid "1024\\ :sup:`5` == 1 << 50"
msgstr "1024\\:sup:`5` == 1 << 50"
#: ../../source/SpinalHDL/Other features/utils.rst:175 language
msgid "EiB"
msgstr "欧洲银行"
#: ../../source/SpinalHDL/Other features/utils.rst:176 language
msgid "1024\\ :sup:`6` == 1 << 60"
msgstr "1024\\ :sup:`6` == 1 << 60"
#: ../../source/SpinalHDL/Other features/utils.rst:177 language
msgid "ZiB"
msgstr "齐布"
#: ../../source/SpinalHDL/Other features/utils.rst:178 language
msgid "1024\\ :sup:`7` == 1 << 70"
msgstr "1024\\ :sup:`7` == 1 << 70"
#: ../../source/SpinalHDL/Other features/utils.rst:179 language
msgid "YiB"
msgstr "乙"
#: ../../source/SpinalHDL/Other features/utils.rst:180 language
msgid "1024\\ :sup:`8` == 1 << 80"
msgstr "1024\\ :sup:`8` == 1 << 80"
#: ../../source/SpinalHDL/Other features/utils.rst:183 language
msgid ""
"Of course, BigInt can also be printed as a string in bytes unit. "
"``BigInt(1024).byteUnit``."
msgstr "当然，BigInt也可以以字节为单位打印为字符串。 “BigInt(1024).byteUnit”。"
