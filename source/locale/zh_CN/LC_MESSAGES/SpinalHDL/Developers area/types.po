
msgid ""
msgstr ""
"Project-Id-Version:SpinalHDL"
"Report-Msgid-Bugs-To:"
"POT-Creation-Date:2023-12-01 11:48+0800"
"PO-Revision-Date:YEAR-MO-DA HO:MI+ZONE"
"Last-Translator:FULL NAME <EMAIL@ADDRESS>"
"Language:zh_CN"
"Language-Team:zh_CN <LL@li.org>"
"Plural-Forms:nplurals=1; plural=0;"
"MIME-Version:1.0"
"Content-Type:text/plain; charset=utf-8"
"Content-Transfer-Encoding:8bit"
"Generated-By:Babel 2.13.1"

#: ../../source/SpinalHDL/Developers area/types.rst:3
msgid "Types"
msgstr "类型"
#: ../../source/SpinalHDL/Developers area/types.rst:10
msgid "Introduction"
msgstr "介绍"
#: ../../source/SpinalHDL/Developers area/types.rst:12
msgid ""
"The language provides 5 base types and 2 composite types that can be used."
msgstr "该语言提供了 5 种可用的基本类型和 2 种复合类型。"
#: ../../source/SpinalHDL/Developers area/types.rst:15
msgid ""
"Base types : ``Bool``, ``Bits``, ``UInt`` for unsigned integers, ``SInt`` "
"for signed integers, ``Enum``."
msgstr "基本类型：“Bool”、“Bits”、“UInt”（无符号整数）、“SInt”（有符号整数）、“Enum”。"
#: ../../source/SpinalHDL/Developers area/types.rst:16
msgid "Composite types : Bundle, Vec."
msgstr "复合类型：Bundle、Vec。"
#: ../../source/SpinalHDL/Developers area/types.rst:22
msgid "Those types and their usage (with examples) are explained hereafter."
msgstr "这些类型及其用法（带有示例）将在后面解释。"
#: ../../source/SpinalHDL/Developers area/types.rst:24
msgid "About the fixed point support it's documented :ref:`there <fixed>`"
msgstr "关于定点支持，它已记录在案：ref:`there <fixed>`"
#: ../../source/SpinalHDL/Developers area/types.rst:27 area/types.rst:45
#: area/types.rst:48 area/types.rst:51 area/types.rst:54 area/types.rst:79
#: area/types.rst:83 area/types.rst:87 area/types.rst:90 area/types.rst:99
#: area/types.rst:102 area/types.rst:105 area/types.rst:108 area/types.rst:111
#: area/types.rst:114 area/types.rst:240 area/types.rst:249 area/types.rst:258
#: area/types.rst:261 area/types.rst:270 area/types.rst:273 area/types.rst:276
#: area/types.rst:357 area/types.rst:360 area/types.rst:363 area/types.rst:366
#: area/types.rst:698 area/types.rst:701
msgid "Bool"
msgstr "布尔"
#: ../../source/SpinalHDL/Developers area/types.rst:29
msgid "This is the standard *boolean* type that correspond to a bit."
msgstr "这是对应于一位的标准 *boolean* 类型。"
#: ../../source/SpinalHDL/Developers area/types.rst:32 area/types.rst:411
msgid "Declaration"
msgstr "宣言"
#: ../../source/SpinalHDL/Developers area/types.rst:34
msgid "The syntax to declare such as value is as follows:"
msgstr "声明 value 的语法如下："
#: ../../source/SpinalHDL/Developers area/types.rst:40 area/types.rst:130
msgid "Syntax"
msgstr "句法"
#: ../../source/SpinalHDL/Developers area/types.rst:41 area/types.rst:75
#: area/types.rst:131 area/types.rst:157 area/types.rst:180 area/types.rst:224
#: area/types.rst:314 area/types.rst:344 area/types.rst:391 area/types.rst:412
#: area/types.rst:425 area/types.rst:654 area/types.rst:694
msgid "Description"
msgstr "描述"
#: ../../source/SpinalHDL/Developers area/types.rst:42 area/types.rst:132
#: area/types.rst:225 area/types.rst:315 area/types.rst:345 area/types.rst:392
#: area/types.rst:426 area/types.rst:695
msgid "Return"
msgstr "返回"
#: ../../source/SpinalHDL/Developers area/types.rst:43
msgid "Bool()"
msgstr "布尔()"
#: ../../source/SpinalHDL/Developers area/types.rst:44
msgid "Create a Bool"
msgstr "创建布尔值"
#: ../../source/SpinalHDL/Developers area/types.rst:46
msgid "True"
msgstr "真的"
#: ../../source/SpinalHDL/Developers area/types.rst:47
msgid "Create a Bool assigned with ``true``"
msgstr "创建一个分配有“true”的 Bool"
#: ../../source/SpinalHDL/Developers area/types.rst:49
msgid "False"
msgstr "错误的"
#: ../../source/SpinalHDL/Developers area/types.rst:50
msgid "Create a Bool assigned with ``false``"
msgstr "创建一个布尔值并赋值为“false”"
#: ../../source/SpinalHDL/Developers area/types.rst:52
msgid "Bool(value : Boolean)"
msgstr "布尔（值：布尔值）"
#: ../../source/SpinalHDL/Developers area/types.rst:53
msgid "Create a Bool assigned with a Scala Boolean"
msgstr "创建一个分配有 Scala 布尔值的 Bool"
#: ../../source/SpinalHDL/Developers area/types.rst:57
msgid "Using this type into SpinalHDL yields:"
msgstr "在 SpinalHDL 中使用这种类型会产生："
#: ../../source/SpinalHDL/Developers area/types.rst:66 area/types.rst:217
msgid "Operators"
msgstr "运营商"
#: ../../source/SpinalHDL/Developers area/types.rst:68
msgid "The following operators are available for the ``Bool`` type"
msgstr "以下运算符可用于“Bool”类型"
#: ../../source/SpinalHDL/Developers area/types.rst:74 area/types.rst:223
#: area/types.rst:313 area/types.rst:343 area/types.rst:390 area/types.rst:424
#: area/types.rst:693
msgid "Operator"
msgstr "操作员"
#: ../../source/SpinalHDL/Developers area/types.rst:76
msgid "Return type"
msgstr "返回类型"
#: ../../source/SpinalHDL/Developers area/types.rst:77
msgid "!x"
msgstr "！X"
#: ../../source/SpinalHDL/Developers area/types.rst:78
msgid "Logical NOT"
msgstr "逻辑非"
#: ../../source/SpinalHDL/Developers area/types.rst
msgid "x && y"
msgstr "x && y"
#: ../../source/SpinalHDL/Developers area/types.rst area/types.rst:229
msgid "x & y"
msgstr "坐标"
#: ../../source/SpinalHDL/Developers area/types.rst:82
msgid "Logical AND"
msgstr "逻辑与"
#: ../../source/SpinalHDL/Developers area/types.rst
msgid "x || y"
msgstr "x|| y"
#: ../../source/SpinalHDL/Developers area/types.rst area/types.rst:232
msgid "x | y"
msgstr "x| y"
#: ../../source/SpinalHDL/Developers area/types.rst:86
msgid "Logical OR"
msgstr "逻辑或"
#: ../../source/SpinalHDL/Developers area/types.rst:88 area/types.rst:235
msgid "x ^ y"
msgstr "x^y"
#: ../../source/SpinalHDL/Developers area/types.rst:89
msgid "Logical XOR"
msgstr "逻辑异或"
#: ../../source/SpinalHDL/Developers area/types.rst:91
msgid "x.set[()]"
msgstr "x.set[()]"
#: ../../source/SpinalHDL/Developers area/types.rst:92
msgid "Set x to True"
msgstr "将 x 设置为 True"
#: ../../source/SpinalHDL/Developers area/types.rst:94
msgid "x.clear[()]"
msgstr "x.清除[()]"
#: ../../source/SpinalHDL/Developers area/types.rst:95
msgid "Set x to False"
msgstr "将 x 设置为 False"
#: ../../source/SpinalHDL/Developers area/types.rst:97
msgid "x.rise[()]"
msgstr "x.上升[()]"
#: ../../source/SpinalHDL/Developers area/types.rst:98
msgid "Return True when x was low at the last cycle and is now high"
msgstr "当 x 在上一个周期为低电平且现在为高电平时返回 True"
#: ../../source/SpinalHDL/Developers area/types.rst:100
msgid "x.rise(initAt : Bool)"
msgstr "x.rise(initAt：布尔)"
#: ../../source/SpinalHDL/Developers area/types.rst:101
msgid "Same as x.rise but with a reset value"
msgstr "与 x.rise 相同但具有重置值"
#: ../../source/SpinalHDL/Developers area/types.rst:103
msgid "x.fall[()]"
msgstr "x.fall[()]"
#: ../../source/SpinalHDL/Developers area/types.rst:104
msgid "Return True when x was high at the last cycle and is now low"
msgstr "当 x 在上一个周期为高且现在为低时返回 True"
#: ../../source/SpinalHDL/Developers area/types.rst:106
msgid "x.fall(initAt : Bool)"
msgstr "x.fall(initAt: Bool)"
#: ../../source/SpinalHDL/Developers area/types.rst:107
msgid "Same as x.fall but with a reset value"
msgstr "与 x.fall 相同但具有重置值"
#: ../../source/SpinalHDL/Developers area/types.rst:109
msgid "x.setWhen(cond)"
msgstr "x.setWhen(条件)"
#: ../../source/SpinalHDL/Developers area/types.rst:110
msgid "Set x when cond is True"
msgstr "当 cond 为 True 时设置 x"
#: ../../source/SpinalHDL/Developers area/types.rst:112
msgid "x.clearWhen(cond)"
msgstr "x.clearWhen(条件)"
#: ../../source/SpinalHDL/Developers area/types.rst:113
msgid "Clear x when cond is True"
msgstr "当 cond 为 True 时清除 x"
#: ../../source/SpinalHDL/Developers area/types.rst:118
msgid "The BitVector family - (``Bits``, ``UInt``, ``SInt``)"
msgstr "BitVector 系列 - (``Bits``, ``UInt``, ``SInt``)"
#: ../../source/SpinalHDL/Developers area/types.rst:120
msgid ""
"``BitVector`` is a family of types for storing multiple bits of information "
"in a single value. This type has three subtypes that can be used to model "
"different behaviours:"
msgstr "“BitVector” 是一个类型系列，用于在单个值中存储多位信息。该类型具有三个子类型，可用于模拟不同的行为："
#: ../../source/SpinalHDL/Developers area/types.rst:121
msgid ""
"``Bits`` do not convey any sign information whereas the ``UInt`` (unsigned "
"integer) and ``SInt`` (signed integer) provide the required operations to "
"compute correct results if signed / unsigned arithmetics is used."
msgstr ""
"“Bits”不传达任何符号信息，而“UInt”（无符号整数）和“SInt”（有符号整数）提供了计算正确结果所需的操作（如果使用有符号/无符号算术）。"
#: ../../source/SpinalHDL/Developers area/types.rst:124
msgid "Declaration syntax"
msgstr "声明语法"
#: ../../source/SpinalHDL/Developers area/types.rst:133
msgid "Bits/UInt/SInt [()]"
msgstr "位/UInt/SInt [()]"
#: ../../source/SpinalHDL/Developers area/types.rst:134
msgid "Create a BitVector, bits count is inferred"
msgstr "创建一个 BitVector，推断位数"
#: ../../source/SpinalHDL/Developers area/types.rst:135 area/types.rst:138
#: area/types.rst:141 area/types.rst:144 area/types.rst:147
msgid "Bits/UInt/SInt"
msgstr "位/UInt/SInt"
#: ../../source/SpinalHDL/Developers area/types.rst:136
msgid "Bits/UInt/SInt(x bits)"
msgstr "位/UInt/SInt（x 位）"
#: ../../source/SpinalHDL/Developers area/types.rst:137
msgid "Create a BitVector with x bits"
msgstr "创建一个具有 x 位的 BitVector"
#: ../../source/SpinalHDL/Developers area/types.rst:139
msgid "B/U/S(value : Int[,width : BitCount])"
msgstr "B/U/S（值：Int[，宽度：BitCount]）"
#: ../../source/SpinalHDL/Developers area/types.rst:140 area/types.rst:143
msgid "Create a BitVector assigned with 'value'"
msgstr "创建一个分配有“value”的 BitVector"
#: ../../source/SpinalHDL/Developers area/types.rst:142
msgid "B/U/S\"[[size']base]value\""
msgstr "B/U/S\"[[size']base]值\""
#: ../../source/SpinalHDL/Developers area/types.rst:145
msgid "B/U/S([x bits], element, ...)"
msgstr "B/U/S([x 位], 元素, ...)"
#: ../../source/SpinalHDL/Developers area/types.rst:146
msgid ""
"Create a BitVector assigned with the value specified by elements (see bellow"
" table)"
msgstr "创建一个分配有元素指定值的 BitVector（见下表）"
#: ../../source/SpinalHDL/Developers area/types.rst:150
msgid "Elements could be defined as follows:"
msgstr "元素可以定义如下："
#: ../../source/SpinalHDL/Developers area/types.rst:156
msgid "Element syntax"
msgstr "元素语法"
#: ../../source/SpinalHDL/Developers area/types.rst:158
msgid "x : Int -> y : Boolean/Bool"
msgstr "x : 整数 -> y : 布尔值/布尔值"
#: ../../source/SpinalHDL/Developers area/types.rst:159
msgid "Set bit x with y"
msgstr "用 y 设置位 x"
#: ../../source/SpinalHDL/Developers area/types.rst:160
msgid "x : Range -> y : Boolean/Bool"
msgstr "x：范围 -> y：布尔值/布尔值"
#: ../../source/SpinalHDL/Developers area/types.rst:161
msgid "Set each bits in range x with y"
msgstr "设置 x 和 y 范围内的每个位"
#: ../../source/SpinalHDL/Developers area/types.rst:162 area/types.rst:167
msgid "x : Range -> y : T"
msgstr "x：范围 -> y：T"
#: ../../source/SpinalHDL/Developers area/types.rst area/types.rst:163
#: area/types.rst:168
msgid "Set bits in range x with y"
msgstr "设置 x 和 y 范围内的位"
#: ../../source/SpinalHDL/Developers area/types.rst:164
msgid "x : Range -> y : String"
msgstr "x：范围 -> y：字符串"
#: ../../source/SpinalHDL/Developers area/types.rst
msgid "The string format follow same rules than B/U/S\"xyz\" one"
msgstr "字符串格式遵循与 B/U/S\"xyz\" 相同的规则"
#: ../../source/SpinalHDL/Developers area/types.rst:169
msgid "default -> y : Boolean/Bool"
msgstr "默认 -> y ：布尔值/布尔值"
#: ../../source/SpinalHDL/Developers area/types.rst
msgid "Set all unconnected bits with the y value."
msgstr "使用 y 值设置所有未连接的位。"
#: ../../source/SpinalHDL/Developers area/types.rst
msgid ""
"This feature could only be use to do assignments without the U/B/S prefix"
msgstr "此功能只能用于进行没有 U/B/S 前缀的分配"
#: ../../source/SpinalHDL/Developers area/types.rst:174
msgid "You can define a Range values"
msgstr "您可以定义范围值"
#: ../../source/SpinalHDL/Developers area/types.rst:179
msgid "Range syntax"
msgstr "范围语法"
#: ../../source/SpinalHDL/Developers area/types.rst:181
msgid "Width"
msgstr "宽度"
#: ../../source/SpinalHDL/Developers area/types.rst:182
msgid "(x downto y)"
msgstr "（x 向下到 y）"
#: ../../source/SpinalHDL/Developers area/types.rst:183
msgid "[x:y] x >= y"
msgstr "[x:y] x >= y"
#: ../../source/SpinalHDL/Developers area/types.rst:184
msgid "x-y+1"
msgstr "x-y+1"
#: ../../source/SpinalHDL/Developers area/types.rst:185
msgid "(x to y)"
msgstr "（x 到 y）"
#: ../../source/SpinalHDL/Developers area/types.rst:186
msgid "[x:y] x <= y"
msgstr "[x:y] x <= y"
#: ../../source/SpinalHDL/Developers area/types.rst:187
msgid "y-x+1"
msgstr "y-x+1"
#: ../../source/SpinalHDL/Developers area/types.rst:188
msgid "(x until y)"
msgstr "（x 到 y）"
#: ../../source/SpinalHDL/Developers area/types.rst:189
msgid "[x:y[ x < y"
msgstr "[x:y[ x < y"
#: ../../source/SpinalHDL/Developers area/types.rst:190
msgid "y-x"
msgstr "y-x"
#: ../../source/SpinalHDL/Developers area/types.rst:226
msgid "~x"
msgstr "〜x"
#: ../../source/SpinalHDL/Developers area/types.rst:227
msgid "Bitwise NOT"
msgstr "按位非"
#: ../../source/SpinalHDL/Developers area/types.rst:228 area/types.rst:321
#: area/types.rst:372
msgid "T(w(x) bits)"
msgstr "T(w(x) 位)"
#: ../../source/SpinalHDL/Developers area/types.rst:230
msgid "Bitwise AND"
msgstr "按位与"
#: ../../source/SpinalHDL/Developers area/types.rst:231 area/types.rst:234
#: area/types.rst:237 area/types.rst:348 area/types.rst:351 area/types.rst:713
msgid "T(max(w(x), w(y) bits)"
msgstr "T(最大(w(x), w(y) 位)"
#: ../../source/SpinalHDL/Developers area/types.rst:233
msgid "Bitwise OR"
msgstr "按位或"
#: ../../source/SpinalHDL/Developers area/types.rst:236
msgid "Bitwise XOR"
msgstr "按位异或"
#: ../../source/SpinalHDL/Developers area/types.rst:238 area/types.rst:427
msgid "x(y)"
msgstr "x(y)"
#: ../../source/SpinalHDL/Developers area/types.rst:239
msgid "Readbit, y : Int/UInt"
msgstr "读取位，y：Int/UInt"
#: ../../source/SpinalHDL/Developers area/types.rst:241
msgid "x(hi,lo)"
msgstr "x(高,低)"
#: ../../source/SpinalHDL/Developers area/types.rst:242
msgid "Read bitfield, hi : Int, lo : Int"
msgstr "读取位域，hi : Int，lo : Int"
#: ../../source/SpinalHDL/Developers area/types.rst:243 area/types.rst:252
#: area/types.rst:722
msgid "T(hi-lo+1 bits)"
msgstr "T(高-低+1位)"
#: ../../source/SpinalHDL/Developers area/types.rst:244
msgid "x(offset,width)"
msgstr "x(偏移量,宽度)"
#: ../../source/SpinalHDL/Developers area/types.rst:245
msgid "Read bitfield, offset: UInt, width: Int"
msgstr "读取位域，偏移量：UInt，宽度：Int"
#: ../../source/SpinalHDL/Developers area/types.rst:246 area/types.rst:255
#: area/types.rst:725
msgid "T(width bits)"
msgstr "T(宽度位)"
#: ../../source/SpinalHDL/Developers area/types.rst:247 area/types.rst:430
msgid "x(y) := z"
msgstr "x(y) := z"
#: ../../source/SpinalHDL/Developers area/types.rst:248
msgid "Assign bits, y : Int/UInt"
msgstr "分配位，y：Int/UInt"
#: ../../source/SpinalHDL/Developers area/types.rst:250
msgid "x(hi,lo) := z"
msgstr "x(高,低) := z"
#: ../../source/SpinalHDL/Developers area/types.rst:251 area/types.rst:721
msgid "Assign bitfield, hi : Int, lo : Int"
msgstr "分配位域，hi : Int，lo : Int"
#: ../../source/SpinalHDL/Developers area/types.rst:253
msgid "x(offset,width) := z"
msgstr "x(偏移量,宽度) := z"
#: ../../source/SpinalHDL/Developers area/types.rst:254 area/types.rst:724
msgid "Assign bitfield, offset: UInt, width: Int"
msgstr "分配位域，偏移量：UInt，宽度：Int"
#: ../../source/SpinalHDL/Developers area/types.rst:256
msgid "x.msb"
msgstr "x.msb"
#: ../../source/SpinalHDL/Developers area/types.rst:257
msgid "Return the most significant bit"
msgstr "返回最高有效位"
#: ../../source/SpinalHDL/Developers area/types.rst:259
msgid "x.lsb"
msgstr "x.lsb"
#: ../../source/SpinalHDL/Developers area/types.rst:260
msgid "Return the least significant bit"
msgstr "返回最低有效位"
#: ../../source/SpinalHDL/Developers area/types.rst:262
msgid "x.range"
msgstr "x.范围"
#: ../../source/SpinalHDL/Developers area/types.rst:263
msgid "Return the range (x.high downto 0)"
msgstr "返回范围（x.high 到 0）"
#: ../../source/SpinalHDL/Developers area/types.rst:264
msgid "Range"
msgstr "范围"
#: ../../source/SpinalHDL/Developers area/types.rst:265
msgid "x.high"
msgstr "x.高"
#: ../../source/SpinalHDL/Developers area/types.rst:266
msgid "Return the upper bound of the type x"
msgstr "返回类型 x 的上限"
#: ../../source/SpinalHDL/Developers area/types.rst:267 area/types.rst:704
msgid "Int"
msgstr "INT"
#: ../../source/SpinalHDL/Developers area/types.rst:268
msgid "x.xorR"
msgstr "异或R"
#: ../../source/SpinalHDL/Developers area/types.rst:269
msgid "XOR all bits of x"
msgstr "对 x 的所有位进行异或"
#: ../../source/SpinalHDL/Developers area/types.rst:271
msgid "x.orR"
msgstr "x或R"
#: ../../source/SpinalHDL/Developers area/types.rst:272
msgid "OR all bits of x"
msgstr "或 x 的所有位"
#: ../../source/SpinalHDL/Developers area/types.rst:274
msgid "x.andR"
msgstr "x和R"
#: ../../source/SpinalHDL/Developers area/types.rst:275
msgid "AND all bits of x"
msgstr "AND x 的所有位"
#: ../../source/SpinalHDL/Developers area/types.rst:277
msgid "x.clearAll[()]"
msgstr "x.clearAll[()]"
#: ../../source/SpinalHDL/Developers area/types.rst:278
msgid "Clear all bits"
msgstr "清除所有位"
#: ../../source/SpinalHDL/Developers area/types.rst:279 area/types.rst:282
#: area/types.rst:429 area/types.rst:728
msgid "T"
msgstr "时间"
#: ../../source/SpinalHDL/Developers area/types.rst:280
msgid "x.setAll[()]"
msgstr "x.setAll[()]"
#: ../../source/SpinalHDL/Developers area/types.rst:281
msgid "Set all bits"
msgstr "设置所有位"
#: ../../source/SpinalHDL/Developers area/types.rst:283
msgid "x.setAllTo(value : Boolean)"
msgstr "x.setAllTo(值：布尔值)"
#: ../../source/SpinalHDL/Developers area/types.rst:284
msgid "Set all bits to the given Boolean value"
msgstr "将所有位设置为给定的布尔值"
#: ../../source/SpinalHDL/Developers area/types.rst:286
msgid "x.setAllTo(value : Bool)"
msgstr "x.setAllTo(值：布尔)"
#: ../../source/SpinalHDL/Developers area/types.rst:287
msgid "Set all bits to the given Bool value"
msgstr "将所有位设置为给定的布尔值"
#: ../../source/SpinalHDL/Developers area/types.rst:289
msgid "x.asBools"
msgstr "x.asBools"
#: ../../source/SpinalHDL/Developers area/types.rst:290
msgid "Cast into a array of Bool"
msgstr "转换为 Bool 数组"
#: ../../source/SpinalHDL/Developers area/types.rst:291
msgid "Vec(Bool(),width(x))"
msgstr "Vec(布尔(),宽度(x))"
#: ../../source/SpinalHDL/Developers area/types.rst:295
msgid "Masked comparison"
msgstr "屏蔽比较"
#: ../../source/SpinalHDL/Developers area/types.rst:297
msgid ""
"Some time you need to check equality between a ``BitVector`` and a bits "
"constant that contain hole (don't care values)."
msgstr "有时您需要检查“BitVector”和包含空洞（不关心值）的位常量之间的相等性。"
#: ../../source/SpinalHDL/Developers area/types.rst:299
msgid "There is an example about how to do that :"
msgstr "有一个关于如何执行此操作的示例："
#: ../../source/SpinalHDL/Developers area/types.rst:307
msgid "Bits"
msgstr "位"
#: ../../source/SpinalHDL/Developers area/types.rst:316 area/types.rst:319
#: area/types.rst:367 area/types.rst:370
msgid "x >> y"
msgstr "x >> y"
#: ../../source/SpinalHDL/Developers area/types.rst:317
msgid "Logical shift right, y : Int"
msgstr "逻辑右移，y：Int"
#: ../../source/SpinalHDL/Developers area/types.rst:318 area/types.rst:369
msgid "T(w(x) - y bits)"
msgstr "T(w(x) - y 位)"
#: ../../source/SpinalHDL/Developers area/types.rst:320
msgid "Logical shift right, y : UInt"
msgstr "逻辑右移，y : UInt"
#: ../../source/SpinalHDL/Developers area/types.rst:322 area/types.rst:325
#: area/types.rst:373 area/types.rst:376
msgid "x << y"
msgstr "x << y"
#: ../../source/SpinalHDL/Developers area/types.rst:323
msgid "Logical shift left, y : Int"
msgstr "逻辑左移，y：Int"
#: ../../source/SpinalHDL/Developers area/types.rst:324 area/types.rst:375
msgid "T(w(x) + y bits)"
msgstr "T(w(x) + y 位)"
#: ../../source/SpinalHDL/Developers area/types.rst:326
msgid "Logical shift left, y : UInt"
msgstr "逻辑左移，y : UInt"
#: ../../source/SpinalHDL/Developers area/types.rst:327 area/types.rst:378
msgid "T(w(x) + max(y) bits)"
msgstr "T(w(x) + max(y) 位)"
#: ../../source/SpinalHDL/Developers area/types.rst:328
msgid "x.rotateLeft(y)"
msgstr "x.向左旋转(y)"
#: ../../source/SpinalHDL/Developers area/types.rst:329
msgid "Logical left rotation, y : UInt"
msgstr "逻辑左旋转，y : UInt"
#: ../../source/SpinalHDL/Developers area/types.rst:330
msgid "T(w(x))"
msgstr "T(w(x))"
#: ../../source/SpinalHDL/Developers area/types.rst:331 area/types.rst:379
msgid "x.resize(y)"
msgstr "x.调整大小(y)"
#: ../../source/SpinalHDL/Developers area/types.rst:332
msgid "Return a resized copy of x, filled with zero, y : Int"
msgstr "返回 x 的调整大小副本，用零填充，y : Int"
#: ../../source/SpinalHDL/Developers area/types.rst:333 area/types.rst:381
msgid "T(y bits)"
msgstr "T(y 位)"
#: ../../source/SpinalHDL/Developers area/types.rst:337
msgid "UInt, SInt"
msgstr "UInt、SInt"
#: ../../source/SpinalHDL/Developers area/types.rst:346
msgid "x + y"
msgstr "x + y"
#: ../../source/SpinalHDL/Developers area/types.rst:347
msgid "Addition"
msgstr "添加"
#: ../../source/SpinalHDL/Developers area/types.rst:349
msgid "x - y"
msgstr "坐标"
#: ../../source/SpinalHDL/Developers area/types.rst:350
msgid "Subtraction"
msgstr "减法"
#: ../../source/SpinalHDL/Developers area/types.rst:352
msgid "x * y"
msgstr "x * y"
#: ../../source/SpinalHDL/Developers area/types.rst:353
msgid "Multiplication"
msgstr "乘法"
#: ../../source/SpinalHDL/Developers area/types.rst:354
msgid "T(w(x) + w(y) bits)"
msgstr "T(w(x) + w(y) 位)"
#: ../../source/SpinalHDL/Developers area/types.rst:355
msgid "x > y"
msgstr "x > y"
#: ../../source/SpinalHDL/Developers area/types.rst:356
msgid "Greater than"
msgstr "比...更棒"
#: ../../source/SpinalHDL/Developers area/types.rst:358
msgid "x >= y"
msgstr "x >= y"
#: ../../source/SpinalHDL/Developers area/types.rst:359
msgid "Greater than or equal"
msgstr "大于或等于"
#: ../../source/SpinalHDL/Developers area/types.rst:361
msgid "x < y"
msgstr "x < y"
#: ../../source/SpinalHDL/Developers area/types.rst:362
msgid "Less than"
msgstr "少于"
#: ../../source/SpinalHDL/Developers area/types.rst:364
msgid "x <= y"
msgstr "x <= y"
#: ../../source/SpinalHDL/Developers area/types.rst:365
msgid "Less than or equal"
msgstr "小于或等于"
#: ../../source/SpinalHDL/Developers area/types.rst:368
msgid "Arithmetic shift right, y : Int"
msgstr "算术右移，y : Int"
#: ../../source/SpinalHDL/Developers area/types.rst:371
msgid "Arithmetic shift right, y : UInt"
msgstr "算术右移，y : UInt"
#: ../../source/SpinalHDL/Developers area/types.rst:374
msgid "Arithmetic shift left, y : Int"
msgstr "算术左移，y : Int"
#: ../../source/SpinalHDL/Developers area/types.rst:377
msgid "Arithmetic shift left, y : UInt"
msgstr "算术左移，y : UInt"
#: ../../source/SpinalHDL/Developers area/types.rst:380
msgid "Return an arithmetic resized copy of x, y : Int"
msgstr "返回 x, y 的算术调整大小副本：Int"
#: ../../source/SpinalHDL/Developers area/types.rst:385
msgid "Bool, Bits, UInt, SInt"
msgstr "布尔型、位、UInt、SInt"
#: ../../source/SpinalHDL/Developers area/types.rst:393 area/types.rst:714
msgid "x.asBits"
msgstr "x.asBits"
#: ../../source/SpinalHDL/Developers area/types.rst:394
msgid "Binary cast in Bits"
msgstr "位中的二进制转换"
#: ../../source/SpinalHDL/Developers area/types.rst:395
msgid "Bits(w(x) bits)"
msgstr "位（w(x) 位）"
#: ../../source/SpinalHDL/Developers area/types.rst:396
msgid "x.asUInt"
msgstr "x.asUIt"
#: ../../source/SpinalHDL/Developers area/types.rst:397
msgid "Binary cast in UInt"
msgstr "UInt 中的二进制转换"
#: ../../source/SpinalHDL/Developers area/types.rst:398
msgid "UInt(w(x) bits)"
msgstr "UInt(w(x) 位)"
#: ../../source/SpinalHDL/Developers area/types.rst:399
msgid "x.asSInt"
msgstr "x.asSInt"
#: ../../source/SpinalHDL/Developers area/types.rst:400
msgid "Binary cast in SInt"
msgstr "SInt 中的二进制转换"
#: ../../source/SpinalHDL/Developers area/types.rst:401
msgid "SInt(w(x) bits)"
msgstr "SInt(w(x) 位)"
#: ../../source/SpinalHDL/Developers area/types.rst:405
msgid "Vec"
msgstr "向量"
#: ../../source/SpinalHDL/Developers area/types.rst:413
msgid "Vec(type : Data, size : Int)"
msgstr "Vec（类型：数据，大小：Int）"
#: ../../source/SpinalHDL/Developers area/types.rst:414
msgid "Create a vector of size time the given type"
msgstr "创建一个大小为给定类型时间的向量"
#: ../../source/SpinalHDL/Developers area/types.rst:415
msgid "Vec(x,y,..)"
msgstr "Vec(x,y,..)"
#: ../../source/SpinalHDL/Developers area/types.rst
msgid "Create a vector where indexes point to given elements."
msgstr "创建一个向量，其中索引指向给定元素。"
#: ../../source/SpinalHDL/Developers area/types.rst
msgid "this construct support mixed element width"
msgstr "该结构支持混合元素宽度"
#: ../../source/SpinalHDL/Developers area/types.rst:428
msgid "Read element y, y : Int/UInt"
msgstr "读取元素 y, y : Int/UInt"
#: ../../source/SpinalHDL/Developers area/types.rst:431
msgid "Assign element y with z, y : Int/UInt"
msgstr "将元素 y 赋值给 z, y : Int/UInt"
#: ../../source/SpinalHDL/Developers area/types.rst:451
msgid "Bundle"
msgstr "捆"
#: ../../source/SpinalHDL/Developers area/types.rst:453
msgid ""
"Bundles could be used to model data structure line buses and interfaces."
msgstr "捆绑包可用于对数据结构线路总线和接口进行建模。"
#: ../../source/SpinalHDL/Developers area/types.rst:454
msgid ""
"All attributes that extends Data (Bool, Bits, UInt, ...) that are defined "
"inside the bundle are considered as part of the bundle."
msgstr "捆绑包内定义的扩展数据（Bool、Bits、UInt...）的所有属性都被视为捆绑包的一部分。"
#: ../../source/SpinalHDL/Developers area/types.rst:457
msgid "Simple example (RGB/VGA)"
msgstr "简单示例（RGB/VGA）"
#: ../../source/SpinalHDL/Developers area/types.rst:459
msgid ""
"The following example show an RGB bundle definition with some internal "
"function."
msgstr "以下示例显示了具有某些内部函数的 RGB 捆绑包定义。"
#: ../../source/SpinalHDL/Developers area/types.rst:475
msgid ""
"Then you can also incorporate a Bundle inside Bundle as deeply as you want:"
msgstr "然后，您还可以根据需要将 Bundle 合并到 Bundle 中："
#: ../../source/SpinalHDL/Developers area/types.rst:485
msgid "And finaly instanciate your Bundles inside the hardware :"
msgstr "最后在硬件中实例化您的捆绑包："
#: ../../source/SpinalHDL/Developers area/types.rst:495
msgid ""
"If you want to specify your bundle as an input or an output of a Component, "
"you have to do it by the following way :"
msgstr "如果你想将你的bundle指定为组件的输入或输出，你必须通过以下方式来完成："
#: ../../source/SpinalHDL/Developers area/types.rst:509
msgid "Interface example (APB)"
msgstr "接口示例（APB）"
#: ../../source/SpinalHDL/Developers area/types.rst:511
msgid ""
"If you want to define an interface, let's imagine an APB interface, you can "
"also use bundles :"
msgstr "如果你想定义一个接口，让我们想象一个APB接口，你也可以使用bundles："
#: ../../source/SpinalHDL/Developers area/types.rst:537
msgid ""
"One good practice is to group all construction parameters inside a "
"configuration class. This could make the parametrization much easier later "
"in your components, especially if you have to reuse the same configuration "
"at multiple places. Also if one time you need to add another construction "
"parameter, you will only have to add it into the configuration class and "
"everywhere this one is instantiated:"
msgstr ""
"一种好的做法是将所有构造参数分组到一个配置类中。这可以使组件中的参数化变得更加容易，特别是当您必须在多个位置重用相同的配置时。另外，如果有一次您需要添加另一个构造参数，您只需将其添加到配置类中，并且在任何地方都可以实例化该参数："
#: ../../source/SpinalHDL/Developers area/types.rst:564
msgid ""
"Then at some points, you will probably need to use the APB bus as master or "
"as slave interface of some components. To do that you can define some "
"functions :"
msgstr "然后在某些时候，您可能需要使用 APB 总线作为某些组件的主接口或从接口。为此，您可以定义一些函数："
#: ../../source/SpinalHDL/Developers area/types.rst:602
msgid ""
"Then to make that better, the spinal.lib integrate a small master slave "
"utile named IMasterSlave. When a bundle extends IMasterSlave, it should "
"implement/override the asMaster function. It give you the ability to setup a"
" master or a slave interface by a smoother way :"
msgstr ""
"为了使这一点变得更好，spine.lib 集成了一个名为 IMasterSlave "
"的小型主从实用程序。当bundle扩展IMasterSlave时，它应该实现/覆盖asMaster函数。它使您能够以更流畅的方式设置主接口或从接口："
#: ../../source/SpinalHDL/Developers area/types.rst:612
msgid "There is an example of an APB bus that implement this IMasterSlave :"
msgstr "有一个实现此 IMasterSlave 的 APB 总线示例："
#: ../../source/SpinalHDL/Developers area/types.rst:644
msgid "Enum"
msgstr "枚举"
#: ../../source/SpinalHDL/Developers area/types.rst:646
msgid "SpinalHDL support enumeration with some encodings :"
msgstr "SpinalHDL 支持一些编码的枚举："
#: ../../source/SpinalHDL/Developers area/types.rst:652
msgid "Encoding"
msgstr "编码"
#: ../../source/SpinalHDL/Developers area/types.rst:653
msgid "Bit width"
msgstr "位宽"
#: ../../source/SpinalHDL/Developers area/types.rst:655
msgid "native"
msgstr "本国的"
#: ../../source/SpinalHDL/Developers area/types.rst:657
msgid "Use the VHDL enumeration system, this is the default encoding"
msgstr "使用VHDL枚举系统，这是默认编码"
#: ../../source/SpinalHDL/Developers area/types.rst:658
msgid "binarySequancial"
msgstr "二进制顺序"
#: ../../source/SpinalHDL/Developers area/types.rst:659
msgid "log2Up(stateCount)"
msgstr "log2Up(状态计数)"
#: ../../source/SpinalHDL/Developers area/types.rst:660
msgid "Use Bits to store states in declaration order (value from 0 to n-1)"
msgstr "使用 Bits 按声明顺序存储状态（值从 0 到 n-1）"
#: ../../source/SpinalHDL/Developers area/types.rst:661
msgid "binaryOneHot"
msgstr "二进制OneHot"
#: ../../source/SpinalHDL/Developers area/types.rst:662
msgid "stateCount"
msgstr "状态计数"
#: ../../source/SpinalHDL/Developers area/types.rst:663
msgid "Use Bits to store state. Each bit correspond to one state"
msgstr "使用位来存储状态。每一位对应一种状态"
#: ../../source/SpinalHDL/Developers area/types.rst:666
msgid "Define a enumeration type:"
msgstr "定义一个枚举类型："
#: ../../source/SpinalHDL/Developers area/types.rst:674
msgid "Instantiate a enumeration signal and assign it :"
msgstr "实例化一个枚举信号并分配它："
#: ../../source/SpinalHDL/Developers area/types.rst:686
msgid "Data (Bool, Bits, UInt, SInt, Enum, Bundle, Vec)"
msgstr "数据（Bool、Bits、UInt、SInt、Enum、Bundle、Vec）"
#: ../../source/SpinalHDL/Developers area/types.rst:688
msgid ""
"All hardware types extends the Data class, which mean that all of them "
"provide following operators :"
msgstr "所有硬件类型都扩展了 Data 类，这意味着它们都提供以下运算符："
#: ../../source/SpinalHDL/Developers area/types.rst:696
msgid "x === y"
msgstr "x === y"
#: ../../source/SpinalHDL/Developers area/types.rst:697
msgid "Equality"
msgstr "平等"
#: ../../source/SpinalHDL/Developers area/types.rst:699
msgid "x =/= y"
msgstr "x =/= y"
#: ../../source/SpinalHDL/Developers area/types.rst:700
msgid "Inequality"
msgstr "不等式"
#: ../../source/SpinalHDL/Developers area/types.rst:702
msgid "x.getWidth"
msgstr "x.getWidth"
#: ../../source/SpinalHDL/Developers area/types.rst:703
msgid "Return bitcount"
msgstr "返回位数"
#: ../../source/SpinalHDL/Developers area/types.rst:705
msgid "x ## y"
msgstr "x##y"
#: ../../source/SpinalHDL/Developers area/types.rst:706
msgid "Concatenate, x->high, y->low"
msgstr "连接，x->高，y->低"
#: ../../source/SpinalHDL/Developers area/types.rst:707
msgid "Bits(width(x) + width(y) bits)"
msgstr "位（宽度（x）+宽度（y）位）"
#: ../../source/SpinalHDL/Developers area/types.rst:708
msgid "Cat(x)"
msgstr "猫(x)"
#: ../../source/SpinalHDL/Developers area/types.rst:709
msgid "Concatenate list, first element on lsb, x : Array[Data]"
msgstr "连接列表，lsb 上的第一个元素，x : Array[Data]"
#: ../../source/SpinalHDL/Developers area/types.rst:710
msgid "Bits(sumOfWidth bits)"
msgstr "位（宽度总和位）"
#: ../../source/SpinalHDL/Developers area/types.rst:711
msgid "Mux(cond,x,y)"
msgstr "多路复用器（条件，x，y）"
#: ../../source/SpinalHDL/Developers area/types.rst:712
msgid "if cond ? x : y"
msgstr "如果条件？ x : y"
#: ../../source/SpinalHDL/Developers area/types.rst:715
msgid "Cast in Bits"
msgstr "铸造在位"
#: ../../source/SpinalHDL/Developers area/types.rst:716
msgid "Bits(width(x) bits)"
msgstr "位（宽度（x）位）"
#: ../../source/SpinalHDL/Developers area/types.rst:717
msgid "x.assignFromBits(bits)"
msgstr "x.assignFromBits(位)"
#: ../../source/SpinalHDL/Developers area/types.rst:718
msgid "Assign from Bits"
msgstr "从位分配"
#: ../../source/SpinalHDL/Developers area/types.rst:720
msgid "x.assignFromBits(bits,hi,lo)"
msgstr "x.assignFromBits(位,hi,lo)"
#: ../../source/SpinalHDL/Developers area/types.rst:723
msgid "x.assignFromBits(bits,offset,width)"
msgstr "x.assignFromBits(位,偏移量,宽度)"
#: ../../source/SpinalHDL/Developers area/types.rst:726
msgid "x.getZero"
msgstr "x.getZero"
#: ../../source/SpinalHDL/Developers area/types.rst:727
msgid "Get equivalent type assigned with zero"
msgstr "获取分配零的等效类型"
#: ../../source/SpinalHDL/Developers area/types.rst:732
msgid "Literals as signal declaration"
msgstr "文字作为信号声明"
#: ../../source/SpinalHDL/Developers area/types.rst:734
msgid ""
"Literals are generally use as a constant value. But you can also use them to"
" do two things in a single one :"
msgstr "文字通常用作常量值。但您也可以使用它们一次完成两件事："
#: ../../source/SpinalHDL/Developers area/types.rst:737
msgid "Define a wire which is assigned with a constant value"
msgstr "定义一条分配有常量值的连线"
#: ../../source/SpinalHDL/Developers area/types.rst:739
msgid "There is an example :"
msgstr "有一个例子："
