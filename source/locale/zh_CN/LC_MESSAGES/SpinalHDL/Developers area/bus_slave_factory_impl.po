
msgid ""
msgstr ""
"Project-Id-Version:SpinalHDL"
"Report-Msgid-Bugs-To:"
"POT-Creation-Date:2023-12-01 11:48+0800"
"PO-Revision-Date:YEAR-MO-DA HO:MI+ZONE"
"Last-Translator:FULL NAME <EMAIL@ADDRESS>"
"Language:zh_CN"
"Language-Team:zh_CN <LL@li.org>"
"Plural-Forms:nplurals=1; plural=0;"
"MIME-Version:1.0"
"Content-Type:text/plain; charset=utf-8"
"Content-Transfer-Encoding:8bit"
"Generated-By:Babel 2.13.1"

#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:7
msgid "Bus Slave Factory Implementation"
msgstr "总线从站工厂实现"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:10
msgid "Introduction"
msgstr "介绍"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:12
msgid ""
"This page will document the implementation of the BusSlaveFactory tool and "
"one of those variant. You can get more information about the functionality "
"of that tool :ref:`there <bus_slave_factory>`."
msgstr ""
"本页将记录 BusSlaveFactory 工具及其变体之一的实现。您可以在 <bus_slave_factory> "
"处获取有关该工具功能的更多信息：ref:`。"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:15
msgid "Specification"
msgstr "规格"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:17
msgid "The class diagram is the following :"
msgstr "类图如下："
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:23
msgid ""
"The ``BusSlaveFactory`` abstract class define minimum requirements that each"
" implementation of it should provide :"
msgstr "“BusSlaveFactory” 抽象类定义了它的每个实现应提供的最低要求："
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:29
#: area/bus_slave_factory_impl.rst:52
msgid "Name"
msgstr "姓名"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:30
#: area/bus_slave_factory_impl.rst:54 area/bus_slave_factory_impl.rst:340
msgid "Description"
msgstr "描述"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:31
msgid "busDataWidth"
msgstr "总线数据宽度"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:32
msgid "Return the data width of the bus"
msgstr "返回总线的数据宽度"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:33
msgid "read(that,address,bitOffset)"
msgstr "读取（那个，地址，位偏移量）"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:34
msgid ""
"When the bus read the ``address``\\ , fill the response with ``that`` at "
"``bitOffset``"
msgstr "当总线读取``address``\\时，在``bitOffset``处用``that``填充响应"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:35
msgid "write(that,address,bitOffset)"
msgstr "写（那个，地址，位偏移量）"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:36
msgid ""
"When the bus write the ``address``\\ , assign ``that`` with bus's data from "
"``bitOffset``"
msgstr "当总线写入``address``\\时，将``bitOffset``中的总线数据分配给``that``"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:37
msgid "onWrite(address)(doThat)"
msgstr "onWrite(地址)(doThat)"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:38
msgid "Call ``doThat`` when a write transaction occur on ``address``"
msgstr "当“address”上发生写事务时调用“doThat”"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:39
msgid "onRead(address)(doThat)"
msgstr "onRead(地址)(doThat)"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:40
msgid "Call ``doThat`` when a read transaction occur on ``address``"
msgstr "当“address”上发生读事务时调用“doThat”"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:41
msgid "nonStopWrite(that,bitOffset)"
msgstr "nonStopWrite（即，bitOffset）"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:42
msgid "Permanently assign ``that`` by the bus write data from ``bitOffset``"
msgstr "通过总线从“bitOffset”写入数据永久分配“that”"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:45
msgid ""
"By using them the ``BusSlaveFactory`` should also be able to provide many "
"utilities :"
msgstr "通过使用它们，“BusSlaveFactory”还应该能够提供许多实用程序："
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:53
msgid "Return"
msgstr "返回"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:55
msgid "readAndWrite(that,address,bitOffset)"
msgstr "readAndWrite(那个,地址,bitOffset)"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:57
msgid ""
"Make ``that`` readable and writable at ``address`` and placed at "
"``bitOffset`` in the word"
msgstr "使“that”在“address”处可读可写，并放置在单词中的“bitOffset”处"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:58
msgid "readMultiWord(that,address)"
msgstr "readMultiWord(那个，地址)"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst
msgid "Create the memory mapping to read ``that`` from 'address'. :"
msgstr "创建内存映射以从“地址”读取“that”。 ："
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst
msgid ""
"If ``that`` is bigger than one word it extends the register on followings "
"addresses"
msgstr "如果“that”大于一个字，它将在以下地址上扩展寄存器"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:62
msgid "writeMultiWord(that,address)"
msgstr "writeMultiWord(那个，地址)"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst
msgid "Create the memory mapping to write ``that`` at 'address'. :"
msgstr "创建内存映射以在“地址”处写入“that”。 ："
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:66
msgid "createWriteOnly(dataType,address,bitOffset)"
msgstr "createWriteOnly(数据类型,地址,bitOffset)"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:67
#: area/bus_slave_factory_impl.rst:70
msgid "T"
msgstr "时间"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:68
msgid ""
"Create a write only register of type ``dataType`` at ``address`` and placed "
"at ``bitOffset`` in the word"
msgstr "在“address”处创建一个“dataType”类型的只写寄存器，并将其放置在字中的“bitOffset”处"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:69
msgid "createReadWrite(dataType,address,bitOffset)"
msgstr "createReadWrite(数据类型,地址,bitOffset)"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:71
msgid ""
"Create a read write register of type ``dataType`` at ``address`` and placed "
"at ``bitOffset`` in the word"
msgstr "在“address”处创建一个“dataType”类型的读写寄存器，并将其放置在字中的“bitOffset”处"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:72
msgid "createAndDriveFlow(dataType,address,bitOffset)"
msgstr "createAndDriveFlow（数据类型，地址，bitOffset）"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:73
msgid "Flow[T]"
msgstr "流量[T]"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:74
msgid ""
"Create a writable Flow register of type ``dataType`` at ``address`` and "
"placed at ``bitOffset`` in the word"
msgstr "在“address”处创建一个“dataType”类型的可写流寄存器，并将其放置在字中的“bitOffset”处"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:75
msgid "drive(that,address,bitOffset)"
msgstr "驱动器（那个，地址，bitOffset）"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:77
msgid ""
"Drive ``that`` with a register writable at ``address`` placed at "
"``bitOffset`` in the word"
msgstr "使用位于字中“bitOffset”处的“address”处可写的寄存器驱动“that”"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:78
msgid "driveAndRead(that,address,bitOffset)"
msgstr "driveAndRead(那个,地址,bitOffset)"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:80
msgid ""
"Drive ``that`` with a register writable and readable at ``address`` placed "
"at ``bitOffset`` in the word"
msgstr "使用位于字中“bitOffset”处的“address”处可写和可读的寄存器驱动“that”"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:81
msgid "driveFlow(that,address,bitOffset)"
msgstr "驱动流（那个，地址，bitOffset）"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:83
msgid ""
"Emit on ``that`` a transaction when a write happen at ``address`` by using "
"data placed at ``bitOffset`` in the word"
msgstr "当写入发生在“address”时，通过使用位于字中“bitOffset”处的数据，在“that”上发出事务"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst
msgid "readStreamNonBlocking(that,address,"
msgstr "readStreamNonBlocking（那个，地址，"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst
msgid "validBitOffset,payloadBitOffset)"
msgstr "有效位偏移量、有效负载位偏移量）"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst
msgid ""
"Read ``that`` and consume the transaction when a read happen at ``address``."
msgstr "读取“that”并在“address”发生读取时消耗事务。"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst
msgid "valid <= validBitOffset bit"
msgstr "有效 <= validBitOffset 位"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst
msgid ""
"payload <= payloadBitOffset+widthOf(payload) downto ``payloadBitOffset``"
msgstr "Payload <= PayloadBitOffset+widthOf(payload) 直至“payloadBitOffset”"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst
msgid "doBitsAccumulationAndClearOnRead"
msgstr "doBitsAccumulationAndClearOnRead"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst
msgid "(that,address,bitOffset)"
msgstr "（即，地址，位偏移量）"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst
msgid "Instanciate an internal register which at each cycle do :"
msgstr "实例化一个内部寄存器，该寄存器在每个周期执行以下操作："
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst
msgid "reg := reg | that"
msgstr "reg := reg |那"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst
msgid ""
"Then when a read occur, the register is cleared. This register is readable "
"at ``address`` and placed at ``bitOffset`` in the word"
msgstr "然后，当发生读取时，寄存器被清除。该寄存器在“address”处可读，并放置在字中的“bitOffset”处"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:98
msgid ""
"About ``BusSlaveFactoryDelayed``, it's still an abstract class, but it "
"capture each primitives (BusSlaveFactoryElement) calls into a data-model. "
"This datamodel is one list that contain all primitives, but also a HashMap "
"that link each address used to a list of primitives that are using it. Then "
"when they all are collected (at the end of the current component), it do a "
"callback that should be implemented by classes that extends it. The "
"implementation of this callback should implement the hardware corresponding "
"to all primitives collected."
msgstr ""
"关于“BusSlaveFactoryDe​​layed”，它仍然是一个抽象类，但它捕获每个原语（BusSlaveFactoryElement）对数据模型的调用。该数据模型是一个包含所有原语的列表，也是一个"
" "
"HashMap，它将使用的每个地址链接到正在使用它的原语列表。然后，当它们全部被收集时（在当前组件的末尾），它会执行一个回调，该回调应该由扩展它的类实现。该回调的实现应该实现与收集的所有原语相对应的硬件。"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:101
msgid "Implementation"
msgstr "执行"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:104
msgid "BusSlaveFactory"
msgstr "总线从属工厂"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:106
msgid "Let's describe primitives abstract function :"
msgstr "让我们来描述一下原语抽象函数："
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:133
msgid "Then let's operate the magic to implement all utile based on them :"
msgstr "然后让我们施展魔法来实现基于它们的所有实用程序："
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:246
msgid "BusSlaveFactoryDelayed"
msgstr "总线从属工厂延迟"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:248
msgid "Let's implement classes that will be used to store primitives :"
msgstr "让我们实现用于存储基元的类："
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:279
msgid "Then let's implement the ``BusSlaveFactoryDelayed`` itself :"
msgstr "然后让我们实现 BusSlaveFactoryDe​​layed 本身："
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:330
msgid "AvalonMMSlaveFactory"
msgstr "Avalon MMSlaveFactory"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:332
msgid ""
"First let's implement the companion object that provide the compatible "
"AvalonMM configuration object that correspond to the following table :"
msgstr "首先让我们实现提供兼容 AvalonMM 配置对象的伴随对象，对应于下表："
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:338
msgid "Pin name"
msgstr "引脚名称"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:339
msgid "Type"
msgstr "类型"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:341
msgid "read"
msgstr "读"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:342
#: area/bus_slave_factory_impl.rst:345 area/bus_slave_factory_impl.rst:354
msgid "Bool"
msgstr "布尔"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:343
msgid "High one cycle to produce a read request"
msgstr "高一个周期产生读请求"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:344
msgid "write"
msgstr "写"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:346
msgid "High one cycle to produce a write request"
msgstr "高一周期产生写请求"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:347
msgid "address"
msgstr "地址"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:348
msgid "UInt(addressWidth bits)"
msgstr "UInt（地址宽度位）"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:349
msgid "Byte granularity but word aligned"
msgstr "字节粒度但字对齐"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:350
msgid "writeData"
msgstr "写数据"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:351
#: area/bus_slave_factory_impl.rst:357
msgid "Bits(dataWidth bits)"
msgstr "位（数据宽度位）"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:353
msgid "readDataValid"
msgstr "读取数据有效"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:355
msgid "High to respond a read command"
msgstr "高电平响应读命令"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:356
msgid "readData"
msgstr "读取数据"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:358
msgid "Valid when readDataValid is high"
msgstr "readDataValid 为高时有效"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:378
msgid "Then, let's implement the AvalonMMSlaveFactory itself."
msgstr "然后，让我们实现 AvalonMMSlaveFactory 本身。"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:429
msgid "Conclusion"
msgstr "结论"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:431
msgid ""
"That's all, you can check one example that use this ``Apb3SlaveFactory`` to "
"create an Apb3UartCtrl :ref:`there <memory_mapped_uart>`."
msgstr ""
"就这样，您可以检查一个使用此``Apb3SlaveFactory`` 来创建一个 Apb3UartCtrl "
"的示例：<memory_mapped_uart>`。"
#: ../../source/SpinalHDL/Developers area/bus_slave_factory_impl.rst:433
msgid ""
"If you want to add the support of a new memory bus, it's very simple you "
"just need to implement another variation of the ``BusSlaveFactoryDelayed`` "
"trait. The ``Apb3SlaveFactory`` is probably a good starting point :D"
msgstr ""
"如果您想添加对新内存总线的支持，非常简单，您只需实现“BusSlaveFactoryDe​​layed”特征的另一个变体即可。 "
"“Apb3SlaveFactory”可能是一个很好的起点：D"
