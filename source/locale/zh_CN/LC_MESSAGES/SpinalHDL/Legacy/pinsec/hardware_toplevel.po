
msgid ""
msgstr ""
"Project-Id-Version:SpinalHDL"
"Report-Msgid-Bugs-To:"
"POT-Creation-Date:2023-12-01 11:48+0800"
"PO-Revision-Date:YEAR-MO-DA HO:MI+ZONE"
"Last-Translator:FULL NAME <EMAIL@ADDRESS>"
"Language:zh_CN"
"Language-Team:zh_CN <LL@li.org>"
"Plural-Forms:nplurals=1; plural=0;"
"MIME-Version:1.0"
"Content-Type:text/plain; charset=utf-8"
"Content-Transfer-Encoding:8bit"
"Generated-By:Babel 2.13.1"

#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:7
msgid "SoC toplevel (Pinsec)"
msgstr "SoC 顶层 (Pinsec)"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:10
msgid "Introduction"
msgstr "介绍"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:12
msgid ""
"``Pinsec`` is a little SoC designed for FPGA. It is available in the "
"SpinalHDL library and some documentation could be find :ref:`there "
"<pinsec_introduction>`"
msgstr ""
"“Pinsec”是一个专为 FPGA 设计的小型 SoC。它可以在 SpinalHDL 库中找到，并且可以在 <pinsec_introduction>"
" 中找到一些文档：ref:`"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:14
msgid ""
"Its toplevel implementation is an interesting example, because it mix some "
"design pattern that make it very easy to modify. Adding a new master or a "
"new peripheral to the bus fabric could be done in the seconde."
msgstr "它的顶层实现是一个有趣的例子，因为它混合了一些设计模式，使其非常容易修改。向总线结构添加新的主设备或新的外设可以立即完成。"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:16
msgid ""
"This toplevel implementation could be consulted there : "
"`https://github.com/SpinalHDL/SpinalHDL/blob/master/lib/src/main/scala/spinal/lib/soc/pinsec/Pinsec.scala"
" "
"<https://github.com/SpinalHDL/SpinalHDL/blob/master/lib/src/main/scala/spinal/lib/soc/pinsec/Pinsec.scala>`_"
msgstr ""
"这个顶级实现可以在那里查阅：`https://github.com/SpinalHDL/SpinalHDL/blob/master/lib/src/main/scala/spinal/lib/soc/pinsec/Pinsec.scala"
" <https://github "
".com/SpinalHDL/SpinalHDL/blob/master/lib/src/main/scala/spinal/lib/soc/pinsec/Pinsec.scala>`_"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:19
msgid "There is the Pinsec toplevel hardware diagram :"
msgstr "这是 Pinsec 顶层硬件图："
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:25
msgid "Defining all IO"
msgstr "定义所有IO"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:47
msgid "Clock and resets"
msgstr "时钟和重置"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:49
msgid "Pinsec has three clocks inputs :"
msgstr "Pinsec 有三个时钟输入："
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:52
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:70
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:73
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:76
msgid "axiClock"
msgstr "轴时钟"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:53
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:79
msgid "vgaClock"
msgstr "显卡时钟"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:54
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:82
msgid "jtag.tck"
msgstr "jtag.tck"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:56
msgid "And one reset input :"
msgstr "以及一个复位输入："
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:59
msgid "asyncReset"
msgstr "异步重置"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:61
msgid "Which will finally give 5 ClockDomain (clock/reset couple) :"
msgstr "最终将给出 5 个 ClockDomain （时钟/重置对）："
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:66
msgid "Name"
msgstr "姓名"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:67
msgid "Clock"
msgstr "钟"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:68
msgid "Description"
msgstr "描述"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:69
msgid "resetCtrlClockDomain"
msgstr "重置Ctrl时钟域"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:71
msgid ""
"Used by the reset controller, Flops of this clock domain are initialized by "
"the FPGA bitstream"
msgstr "由复位控制器使用，该时钟域的Flops由FPGA比特流初始化"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:72
msgid "axiClockDomain"
msgstr "axi时钟域"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:74
msgid "Used by all component connected to the AXI and the APB interconnect"
msgstr "由连接到 AXI 和 APB 互连的所有组件使用"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:75
msgid "coreClockDomain"
msgstr "核心时钟域"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:77
msgid ""
"The only difference with the axiClockDomain, is the fact that the reset "
"could also be asserted by the debug module"
msgstr "与 axiClockDomain 的唯一区别是调试模块也可以断言复位"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:78
msgid "vgaClockDomain"
msgstr "vga时钟域"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:80
msgid "Used by the VGA controller backend as a pixel clock"
msgstr "由 VGA 控制器后端用作像素时钟"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:81
msgid "jtagClockDomain"
msgstr "jtag时钟域"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:83
msgid "Used to clock the frontend of the JTAG controller"
msgstr "用于为 JTAG 控制器的前端提供时钟"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:87
msgid "Reset controller"
msgstr "复位控制器"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:89
msgid ""
"First we need to define the reset controller clock domain, which has no "
"reset wire, but use the FPGA bitstream loading to setup flipflops."
msgstr "首先我们需要定义复位控制器时钟域，它没有复位线，而是使用FPGA比特流加载来设置触发器。"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:100
msgid "Then we can define a simple reset controller under this clock domain."
msgstr "然后我们可以在这个时钟域下定义一个简单的复位控制器。"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:131
msgid "Systems clock domains"
msgstr "系统时钟域"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:133
msgid ""
"Now that the reset controller is implemented, we can define clock domain for"
" all part of Pinsec :"
msgstr "现在复位控制器已经实现，我们可以为 Pinsec 的所有部分定义时钟域："
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:157
msgid ""
"Also all the core system of Pinsec will be defined into a ``axi`` clocked "
"area :"
msgstr "此外，Pinsec 的所有核心系统都将被定义为“axi”时钟区域："
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:166
msgid "Main components"
msgstr "主要成分"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:168
msgid "Pinsec is constituted mainly by 4 main components :"
msgstr "Pinsec 主要由 4 个主要组件构成："
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:171
msgid "One RISCV CPU"
msgstr "1个RISCV CPU"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:172
msgid "One SDRAM controller"
msgstr "1个SDRAM控制器"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:173
msgid "One on chip memory"
msgstr "一个片上存储器"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:174
msgid "One JTAG controller"
msgstr "1个JTAG控制器"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:177
msgid "RISCV CPU"
msgstr "精简指令集计算机"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:179
msgid "The RISCV CPU used in Pinsec as many parametrization possibilities :"
msgstr "Pinsec 中使用的 RISCV CPU 具有多种参数化可能性："
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:226
msgid "On chip RAM"
msgstr "片上RAM"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:228
msgid "The instanciation of the AXI4 on chip RAM is very simple."
msgstr "AXI4 片上 RAM 的实例化非常简单。"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:230
msgid ""
"In fact it's not an AXI4 but an Axi4Shared, which mean that a ARW channel "
"replace the AR and AW ones. This solution use less area while being fully "
"interoperable with full AXI4."
msgstr ""
"事实上，它不是 AXI4，而是 Axi4Shared，这意味着 ARW 通道取代了 AR 和 AW 通道。该解决方案占用的面积更少，同时可与完整的 "
"AXI4 完全互操作。"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:241
msgid "SDRAM controller"
msgstr "SDRAM控制器"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:243
msgid ""
"First you need to define the layout and timings of your SDRAM device. On the"
" DE1-SOC, the SDRAM device is an IS42x320D one."
msgstr "首先，您需要定义 SDRAM 设备的布局和时序。在 DE1-SOC 上，SDRAM 设备是 IS42x320D。"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:270
msgid ""
"Then you can used those definition to parametrize the SDRAM controller "
"instantiation."
msgstr "然后您可以使用这些定义来参数化 SDRAM 控制器实例化。"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:283
msgid "JTAG controller"
msgstr "JTAG控制器"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:285
msgid ""
"The JTAG controller could be used to access memories and debug the CPU from "
"an PC."
msgstr "JTAG 控制器可用于从 PC 访问存储器并调试 CPU。"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:297
msgid "Peripherals"
msgstr "周边设备"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:299
msgid "Pinsec integrate some peripherals :"
msgstr "Pinsec 集成了一些外设："
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:302
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:308
msgid "GPIO"
msgstr "通用输入输出接口"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:303
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:321
msgid "Timer"
msgstr "计时器"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:304
msgid "UART"
msgstr "串口"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:305
msgid "VGA"
msgstr "VGA"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:323
msgid "The Pinsec timer module is constituted of :"
msgstr "Pinsec 定时器模块由以下部分组成："
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:326
msgid "One prescaler"
msgstr "1 个预分频器"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:327
msgid "One 32 bits timer"
msgstr "1个32位定时器"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:328
msgid "Three 16 bits timers"
msgstr "三个16位定时器"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:330
msgid "All of them are packed into the PinsecTimerCtrl component."
msgstr "所有这些都被打包到 PinsecTimerCtrl 组件中。"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:337
msgid "UART controller"
msgstr "串口控制器"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:339
msgid "First we need to define a configuration for our UART controller :"
msgstr "首先我们需要为 UART 控制器定义一个配置："
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:355
msgid "Then we can use it to instantiate the UART controller"
msgstr "然后我们可以用它来实例化UART控制器"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:362
msgid "VGA controller"
msgstr "VGA控制器"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:364
msgid "First we need to define a configuration for our VGA controller :"
msgstr "首先我们需要定义 VGA 控制器的配置："
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:378
msgid "Then we can use it to instantiate the VGA controller"
msgstr "然后我们可以用它来实例化VGA控制器"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:385
msgid "Bus interconnects"
msgstr "总线互连"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:387
msgid "There is three interconnections components :"
msgstr "共有三个互连组件："
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:390
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:408
msgid "AXI4 crossbar"
msgstr "AXI4 交叉开关"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:391
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:395
msgid "AXI4 to APB3 bridge"
msgstr "AXI4 至 APB3 桥接器"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:392
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:469
msgid "APB3 decoder"
msgstr "APB3解码器"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:397
msgid ""
"This bridge will be used to connect low bandwidth peripherals to the AXI "
"crossbar."
msgstr "该桥将用于将低带宽外设连接到 AXI 交叉开关。"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:410
msgid ""
"The AXI4 crossbar that interconnect AXI4 masters and slaves together  is "
"generated by using an factory. The concept of this factory is to create it, "
"then call many function on it to configure it, and finaly call the ``build``"
" function to ask the factory to generate the corresponding hardware :"
msgstr ""
"将 AXI4 主设备和从设备互连在一起的 AXI4 "
"交叉开关是使用工厂生成的。这个工厂的概念是创建它，然后调用它的许多函数来配置它，最后调用``build``函数来要求工厂生成相应的硬件："
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:419
msgid "First you need to populate slaves interfaces :"
msgstr "首先，您需要填充从属接口："
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:431
msgid ""
"Then you need to populate interconnections between slaves and masters :"
msgstr "然后您需要填充从站和主站之间的互连："
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:444
msgid ""
"Then to reduce combinatorial path length and have a good design FMax, you "
"can ask the factory to insert pipelining stages between itself a given "
"master or slave :"
msgstr "然后，为了减少组合路径长度并拥有良好的设计 FMax，您可以要求工厂在给定的主设备或从设备之间插入流水线阶段："
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst
msgid ""
"``halfPipe`` / >> / << / >/->  in the following code are provided by the "
"Stream bus library."
msgstr "以下代码中的``halfPipe`` / >> / << / >/->由Stream总线库提供。"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst
msgid ""
"Some documentation could be find :ref:`there <stream>`. In short, it's just "
"some pipelining and interconnection stuff."
msgstr "可以在 <stream> 中找到一些文档。简而言之，这只是一些管道和互连的东西。"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:471
msgid ""
"The interconnection between the APB3 bridge and all peripherals is done via "
"an APB3Decoder :"
msgstr "APB3 桥和所有外设之间的互连是通过 APB3Decoder 完成的："
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:488
msgid "Misc"
msgstr "杂项"
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:490
msgid ""
"To connect all toplevel IO to components, the following code is required :"
msgstr "要将所有顶级 IO 连接到组件，需要以下代码："
#: ../../source/SpinalHDL/Legacy/pinsec/hardware_toplevel.rst:501
msgid ""
"And finally some connections between components are required like interrupts"
" and core debug module resets"
msgstr "最后需要组件之间的一些连接，例如中断和核心调试模块重置"
