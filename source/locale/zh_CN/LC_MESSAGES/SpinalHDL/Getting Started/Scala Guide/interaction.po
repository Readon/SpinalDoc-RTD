
msgid ""
msgstr ""
"Project-Id-Version:SpinalHDL"
"Report-Msgid-Bugs-To:"
"POT-Creation-Date:2023-12-01 11:48+0800"
"PO-Revision-Date:YEAR-MO-DA HO:MI+ZONE"
"Last-Translator:FULL NAME <EMAIL@ADDRESS>"
"Language:zh_CN"
"Language-Team:zh_CN <LL@li.org>"
"Plural-Forms:nplurals=1; plural=0;"
"MIME-Version:1.0"
"Content-Type:text/plain; charset=utf-8"
"Content-Transfer-Encoding:8bit"
"Generated-By:Babel 2.13.1"

#: ../../source/SpinalHDL/Getting Guide/interaction.rst:3 Started/Scala
msgid "Interaction"
msgstr "相互作用"
#: ../../source/SpinalHDL/Getting Guide/interaction.rst:6 Started/Scala
msgid "Introduction"
msgstr "介绍"
#: ../../source/SpinalHDL/Getting Guide/interaction.rst:8 Started/Scala
msgid ""
"SpinalHDL is, in fact, not an language: it's a regular Scala library. This "
"could seem strange at first glance, but it is a very powerful combination."
msgstr "事实上，SpinalHDL 不是一种语言：它是一个常规的 Scala 库。乍一看这似乎很奇怪，但这是一个非常强大的组合。"
#: ../../source/SpinalHDL/Getting Guide/interaction.rst:10 Started/Scala
msgid ""
"You can use the whole Scala world to help you in the description of your "
"hardware via the SpinalHDL library, but to do that properly, it's important "
"to understand how SpinalHDL interacts with Scala."
msgstr ""
"您可以使用整个 Scala 世界通过 SpinalHDL 库来帮助您描述硬件，但要正确地做到这一点，了解 SpinalHDL 如何与 Scala "
"交互非常重要。"
#: ../../source/SpinalHDL/Getting Guide/interaction.rst:13 Started/Scala
msgid "How SpinalHDL works behind the API"
msgstr "SpinalHDL 在 API 背后的工作原理"
#: ../../source/SpinalHDL/Getting Guide/interaction.rst:15 Started/Scala
msgid ""
"When you execute your SpinalHDL hardware description, each time you use "
"SpinalHDL functions, operators, or classes, it will build an in-memory graph"
" that represents the netlist of your design."
msgstr "当您执行 SpinalHDL 硬件描述时，每次使用 SpinalHDL 函数、运算符或类时，它都会构建一个内存中图形来表示您的设计的网表。"
#: ../../source/SpinalHDL/Getting Guide/interaction.rst:17 Started/Scala
msgid ""
"Then, when the elaboration is done (instantiation of your top-level "
"``Component`` classes), SpinalHDL will do some passes on the graph that was "
"constructed, and if everything is fine, it will flush that graph into a VHDL"
" or Verilog file."
msgstr ""
"然后，当详细说明完成后（顶级“Component”类的实例化），SpinalHDL 将对构建的图进行一些传递，如果一切正常，它将将该图刷新为 VHDL "
"或 Verilog文件。"
#: ../../source/SpinalHDL/Getting Guide/interaction.rst:20 Started/Scala
msgid "Everything is a reference"
msgstr "一切都是参考"
#: ../../source/SpinalHDL/Getting Guide/interaction.rst:22 Started/Scala
msgid ""
"For example, if you define a Scala function which takes a parameter of type "
"``Bits``, when you call it, it will be passed as a reference. As consequence"
" of that, if you assign that argument inside the function, it has the same "
"effect on the underlying ``Bits`` object as if you had assigned to it "
"outside the function."
msgstr ""
"例如，如果您定义一个 Scala "
"函数，它接受类型为“Bits”的参数，那么当您调用它时，它将作为引用传递。因此，如果您在函数内部分配该参数，它对底层“Bits”对象具有相同的效果，就像您在函数外部分配给它一样。"
#: ../../source/SpinalHDL/Getting Guide/interaction.rst:27 Started/Scala
msgid "Hardware types"
msgstr "硬件类型"
#: ../../source/SpinalHDL/Getting Guide/interaction.rst:29 Started/Scala
msgid "Hardware data types in SpinalHDL are the combination of two things:"
msgstr "SpinalHDL 中的硬件数据类型是两件事的组合："
#: ../../source/SpinalHDL/Getting Guide/interaction.rst:32 Started/Scala
msgid "An instance of a given Scala type"
msgstr "给定 Scala 类型的实例"
#: ../../source/SpinalHDL/Getting Guide/interaction.rst:33 Started/Scala
msgid "The configuration of that instance"
msgstr "该实例的配置"
#: ../../source/SpinalHDL/Getting Guide/interaction.rst:35 Started/Scala
msgid ""
"For example ``Bits(8 bits)`` is the combination of the Scala type ``Bits`` "
"and its ``8 bits`` configuration (as a construction parameter)."
msgstr "例如，“Bits(8 位)”是 Scala 类型“Bits”及其“8 位”配置（作为构造参数）的组合。"
#: ../../source/SpinalHDL/Getting Guide/interaction.rst:38 Started/Scala
msgid "RGB example"
msgstr "RGB 示例"
#: ../../source/SpinalHDL/Getting Guide/interaction.rst:40 Started/Scala
msgid "Let's take an Rgb bundle class as example:"
msgstr "我们以 Rgb 捆绑类为例："
#: ../../source/SpinalHDL/Getting Guide/interaction.rst:50 Started/Scala
msgid ""
"The hardware data type here is the combination of the Scala ``Rgb`` class "
"and its ``rWidth``, ``gWidth``, and ``bWidth`` parameterization."
msgstr "这里的硬件数据类型是 Scala“Rgb”类及其“rWidth”、“gWidth”和“bWidth”参数化的组合。"
#: ../../source/SpinalHDL/Getting Guide/interaction.rst:52 Started/Scala
msgid "Here is an example of usage:"
msgstr "这是一个用法示例："
#: ../../source/SpinalHDL/Getting Guide/interaction.rst:62 Started/Scala
msgid ""
"You can also use functions to define various kinds of type factories "
"(typedef):"
msgstr "您还可以使用函数来定义各种类型工厂（typedef）："
#: ../../source/SpinalHDL/Getting Guide/interaction.rst:73 Started/Scala
msgid "Names of signals in the generated RTL"
msgstr "生成的 RTL 中的信号名称"
#: ../../source/SpinalHDL/Getting Guide/interaction.rst:75 Started/Scala
msgid ""
"To name signals in the generated RTL, SpinalHDL uses Java reflections to "
"walk through your entire component hierarchy, collecting all references "
"stored inside the class attributes, and naming them with their attribute "
"name."
msgstr ""
"为了命名生成的 RTL 中的信号，SpinalHDL 使用 Java 反射遍历整个组件层次结构，收集存储在类属性内的所有引用，并使用属性名称命名它们。"
#: ../../source/SpinalHDL/Getting Guide/interaction.rst:77 Started/Scala
msgid ""
"This is why the names of every signal defined inside a function are lost:"
msgstr "这就是函数内定义的每个信号的名称都会丢失的原因："
#: ../../source/SpinalHDL/Getting Guide/interaction.rst:88 Started/Scala
msgid ""
"One solution if you want preserve the names of the internal variables in the"
" generated RTL, is to use ``Area``:"
msgstr "如果您想在生成的 RTL 中保留内部变量的名称，一种解决方案是使用“Area”："
#: ../../source/SpinalHDL/Getting Guide/interaction.rst:100 Started/Scala
msgid "Scala is for elaboration, SpinalHDL for hardware description"
msgstr "Scala 用于阐述，SpinalHDL 用于硬件描述"
#: ../../source/SpinalHDL/Getting Guide/interaction.rst:102 Started/Scala
msgid ""
"For example, if you write a Scala for loop to generate some hardware, it "
"will generate the unrolled result in VHDL/Verilog."
msgstr "例如，如果您编写 Scala for 循环来生成某些硬件，它将生成 VHDL/Verilog 中的展开结果。"
#: ../../source/SpinalHDL/Getting Guide/interaction.rst:104 Started/Scala
msgid ""
"Also, if you want a constant, you should not use SpinalHDL hardware literals"
" but the Scala ones. For example:"
msgstr "另外，如果你想要一个常量，你不应该使用 SpinalHDL 硬件文字，而应该使用 Scala 硬件文字。例如："
#: ../../source/SpinalHDL/Getting Guide/interaction.rst:119 Started/Scala
msgid "Scala elaboration capabilities (if, for, functional programming)"
msgstr "Scala 阐述能力（if、for、函数式编程）"
#: ../../source/SpinalHDL/Getting Guide/interaction.rst:121 Started/Scala
msgid ""
"All of Scala's syntax can be used to elaborate hardware designs, for "
"instance, a Scala ``if`` statement could be used to enable or disable the "
"generation of hardware:"
msgstr "Scala 的所有语法都可用于详细设计硬件，例如，Scala ``if`` 语句可用于启用或禁用硬件的生成："
#: ../../source/SpinalHDL/Getting Guide/interaction.rst:133 Started/Scala
msgid "The same is true for Scala ``for`` loops:"
msgstr "Scala 的“for”循环也是如此："
#: ../../source/SpinalHDL/Getting Guide/interaction.rst:145 Started/Scala
msgid ""
"Also, functional programming techniques can be used with many SpinalHDL "
"types:"
msgstr "此外，函数式编程技术可用于许多 SpinalHDL 类型："
