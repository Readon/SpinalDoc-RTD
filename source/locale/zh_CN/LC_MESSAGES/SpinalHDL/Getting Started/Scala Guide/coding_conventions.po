
msgid ""
msgstr ""
"Project-Id-Version:SpinalHDL"
"Report-Msgid-Bugs-To:"
"POT-Creation-Date:2023-12-01 11:48+0800"
"PO-Revision-Date:YEAR-MO-DA HO:MI+ZONE"
"Last-Translator:FULL NAME <EMAIL@ADDRESS>"
"Language:zh_CN"
"Language-Team:zh_CN <LL@li.org>"
"Plural-Forms:nplurals=1; plural=0;"
"MIME-Version:1.0"
"Content-Type:text/plain; charset=utf-8"
"Content-Transfer-Encoding:8bit"
"Generated-By:Babel 2.13.1"

#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:3 Started/Scala
msgid "Coding conventions"
msgstr "编码约定"
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:6 Started/Scala
msgid "Introduction"
msgstr "介绍"
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:8 Started/Scala
msgid ""
"The coding conventions used in SpinalHDL are the same as the ones documented"
" in the `Scala Style Guide <https://docs.scala-lang.org/style/>`_."
msgstr ""
"SpinalHDL 中使用的编码约定与《Scala 风格指南 <https://docs.scala-lang.org/style/>》中记录的相同。"
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:10
#: Started/Scala
msgid ""
"Some additional practical details and cases are explained in next pages."
msgstr "一些额外的实际细节和案例将在下几页中解释。"
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:13
#: Started/Scala
msgid "class vs case class"
msgstr "类与案例类"
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:15
#: Started/Scala
msgid ""
"When you define a ``Bundle`` or a ``Component``, it is preferable to declare"
" it as a case class."
msgstr "当您定义“Bundle”或“Component”时，最好将其声明为案例类。"
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:17
#: Started/Scala
msgid "The reasons are:"
msgstr "原因是："
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:19
#: Started/Scala
msgid ""
"It avoids the use of ``new`` keywords. Never having to use it is better than"
" sometimes, under some conditions."
msgstr "它避免使用“new”关键字。在某些情况下，永远不必使用它比有时使用它要好。"
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:20
#: Started/Scala
msgid ""
"A ``case class`` provides a ``clone`` function. This is useful in SpinalHDL "
"when there is a need to clone a ``Bundle``, for example, when you define a "
"new ``Reg`` or a new ``Stream`` of some kind."
msgstr ""
"``case class`` 提供``clone`` 功能。当需要克隆“Bundle”时，这在 SpinalHDL "
"中非常有用，例如，当您定义新的“Reg”或某种新的“Stream”时。"
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:21
#: Started/Scala
msgid "Construction parameters are directly visible from outside."
msgstr "施工参数从外部直接可见。"
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:24
#: Started/Scala
msgid "[case] class"
msgstr "【案例】类"
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:26
#: Started/Scala
msgid "All classes names should start with a uppercase letter"
msgstr "所有类名称都应以大写字母开头"
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:43
#: Started/Scala
msgid "companion object"
msgstr "伴生对象"
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:45
#: Started/Scala
msgid ""
"A `companion object <https://docs.scala-lang.org/overviews/scala-"
"book/companion-objects.html>`_ should start with an uppercase letter."
msgstr ""
"`伴随对象 <https://docs.scala-lang.org/overviews/scala-book/companion-"
"objects.html>`_ 应该以大写字母开头。"
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:57
#: Started/Scala
msgid ""
"An exception to this rule is when the companion object is used as a function"
" (only ``apply`` inside), and these ``apply`` functions don't generate "
"hardware:"
msgstr "此规则的一个例外是当伴生对象用作函数时（仅在内部“apply”），并且这些“apply”函数不生成硬件："
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:66
#: Started/Scala
msgid "function"
msgstr "功能"
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:68
#: Started/Scala
msgid "A function should always start with a lowercase letter:"
msgstr "函数应始终以小写字母开头："
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:80
#: Started/Scala
msgid "instances"
msgstr "实例"
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:82
#: Started/Scala
msgid "Instances of classes should always start with a lowercase letter:"
msgstr "类的实例应始终以小写字母开头："
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:90
#: Started/Scala
msgid "if / when"
msgstr "如果/当"
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:92
#: Started/Scala
msgid ""
"Scala ``if`` and SpinalHDL ``when`` should normally be written in the "
"following way:"
msgstr "Scala ``if`` 和 SpinalHDL ``when`` 通常应按以下方式编写："
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:112
#: Started/Scala
msgid "Exceptions could be:"
msgstr "例外情况可能是："
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:114
#: Started/Scala
msgid "It's fine to omit the dot before ``otherwise``."
msgstr "省略“otherwise”之前的点就可以了。"
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:115
#: Started/Scala
msgid ""
"It's fine to compress an ``if``\\ /\\ ``when`` statement onto a single line "
"if it makes the code more readable."
msgstr "如果可以使代码更具可读性，可以将 ``if``\\ /\\ ``when`` 语句压缩到一行中。"
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:118
#: Started/Scala
msgid "switch"
msgstr "转变"
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:120
#: Started/Scala
msgid "SpinalHDL ``switch`` should normally be written in the following way:"
msgstr "SpinalHDL``switch`` 通常应按以下方式编写："
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:136
#: Started/Scala
msgid ""
"It's fine to compress an ``is``\\ /\\ ``default`` statement onto a single "
"line if it makes the code more readable."
msgstr "如果可以使代码更具可读性，可以将 ``is``\\ /\\ ``default`` 语句压缩到一行中。"
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:139
#: Started/Scala
msgid "Parameters"
msgstr "参数"
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:141
#: Started/Scala
msgid ""
"Grouping parameters of a ``Component``/``Bundle`` inside a case class is "
"generally welcome because:"
msgstr "在案例类中对“Component”/“Bundle”的参数进行分组通常是受欢迎的，因为："
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:143
#: Started/Scala
msgid "Easier to carry/manipulate to configure the design"
msgstr "更容易携带/操作配置设计"
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:144
#: Started/Scala
msgid "Better maintainability"
msgstr "更好的可维护性"
#: ../../source/SpinalHDL/Getting Guide/coding_conventions.rst:158
#: Started/Scala
msgid ""
"But this should not be applied in all cases. For example: in a FIFO, it "
"doesn't make sense to group the ``dataType`` parameter with the ``depth`` "
"parameter of the fifo because, in general, the ``dataType`` is something "
"related to the design, while the ``depth`` is something related to the "
"configuration of the design."
msgstr ""
"但这不应该适用于所有情况。例如：在 FIFO 中，将“dataType”参数与 fifo "
"的“深度”参数分组是没有意义的，因为一般来说，“dataType”与设计相关。 ，而“深度”则与设计的配置有关。"
