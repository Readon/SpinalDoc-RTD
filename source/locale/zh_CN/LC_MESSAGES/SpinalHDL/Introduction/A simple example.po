msgid ""
msgstr ""
"Project-Id-Version: SpinalHDLReport-Msgid-Bugs-To:POT-Creation-Date:2023-12-01 11:48+0800PO-Revision-Date:YEAR-MO-DA HO:MI+ZONELast-Translator:FULL NAME <EMAIL@ADDRESS>Language:zh_CNLanguage-Team:zh_CN <LL@li.org>Plural-Forms:nplurals=1; plural=0;MIME-Version:1.0Content-Type:text/plain; charset=utf-8Content-Transfer-Encoding:8bitGenerated-By:Babel 2.13.1\n"
"POT-Creation-Date: \n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: zh\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.4.1\n"

#: ../../source/SpinalHDL/Introduction/A example.rst:4 simple
msgid "A simple example"
msgstr "一个简单的例子"

#: ../../source/SpinalHDL/Introduction/A example.rst:6 simple
msgid "Below is a simple hardware description from the `getting started <https://github.com/SpinalHDL/SpinalTemplateSbt>`_ repository."
msgstr "以下是来自`入门 <https://github.com/SpinalHDL/SpinalTemplateSbt>`_ 仓库的简单硬件描述。"

#: ../../source/SpinalHDL/Introduction/A example.rst:29 simple
msgid "It is split into chunks and explained in this section."
msgstr "它被分成多个块并在本节中进行解释。"

#: ../../source/SpinalHDL/Introduction/A example.rst:33 simple
msgid "Component"
msgstr "组件"

#: ../../source/SpinalHDL/Introduction/A example.rst:35 simple
msgid "First, there is the structure of a SpinalHDL ``Component``."
msgstr "首先，有 SpinalHDL``组件``的结构。"

#: ../../source/SpinalHDL/Introduction/A example.rst:37 simple
msgid "A component is a piece of logic which can be instantiated (pasted) as many times as needed, and where the only accessible signals are its inputs and outputs."
msgstr "组件是一段逻辑，可以根据需要多次实例化（粘贴），并且唯一可访问的信号是其输入和输出。"

#: ../../source/SpinalHDL/Introduction/A example.rst:50 simple
msgid "``MyTopLevel`` is the name of the component."
msgstr "``MyTopLevel`` 是组件的名称。"

#: ../../source/SpinalHDL/Introduction/A example.rst:52 simple
msgid "In SpinalHDL, components use ``UpperCamelCase``."
msgstr "在 SpinalHDL 中，组件使用``UpperCamelCase``（驼峰命名法）。"

#: ../../source/SpinalHDL/Introduction/A example.rst:56 simple
msgid "See :ref:`Component` for more information."
msgstr "请参阅 :ref:`Component` 了解更多信息。"

#: ../../source/SpinalHDL/Introduction/A example.rst:60 simple
msgid "Ports"
msgstr "端口"

#: ../../source/SpinalHDL/Introduction/A example.rst:62 simple
msgid "Then, the ports are defined."
msgstr "然后，定义端口。"

#: ../../source/SpinalHDL/Introduction/A example.rst:71 simple
msgid "Directions:"
msgstr "方向："

#: ../../source/SpinalHDL/Introduction/A example.rst:73 simple
msgid "``cond0`` and ``cond1`` are inputs ports"
msgstr "``cond0`` 和 ``cond1`` 是输入端口"

#: ../../source/SpinalHDL/Introduction/A example.rst:74 simple
msgid "``flag`` and ``state`` are outputs ports"
msgstr "“flag” 和 “state” 是输出端口"

#: ../../source/SpinalHDL/Introduction/A example.rst:76 simple
msgid "Types:"
msgstr "类型："

#: ../../source/SpinalHDL/Introduction/A example.rst:78 simple
msgid "``cond0``, ``cond1`` and ``flag`` are three bits (3 individual wires)"
msgstr "``cond0``、``cond1`` 和 ``flag`` 是三个位（3 条单独的线）"

#: ../../source/SpinalHDL/Introduction/A example.rst:79 simple
msgid "``state`` is an 8-bit unsigned integer (a set of 8 wires representing an unsigned integer)"
msgstr "``state``是一个8位无符号整数（一组8根线代表一个无符号整数）"

#: ../../source/SpinalHDL/Introduction/A example.rst:84 simple
msgid "This syntax is only available since SpinalHDL 1.8, see :ref:`io` for legacy syntax and more information."
msgstr "此语法仅自 SpinalHDL 1.8 起可用，请参阅 :ref:`io` 了解旧语法和更多信息。"

#: ../../source/SpinalHDL/Introduction/A example.rst:89 simple
msgid "Internal logic"
msgstr "内部逻辑"

#: ../../source/SpinalHDL/Introduction/A example.rst:91 simple
msgid "Finally, there is the component logic:"
msgstr "最后是组件逻辑："

#: ../../source/SpinalHDL/Introduction/A example.rst:104 simple
msgid "``counter`` is a register containing an 8-bits unsigned integer, with the initial value 0. Assignments to a registers can be read only after the next clock sampling."
msgstr "``counter`` 是一个包含 8 位无符号整数的寄存器，初始值为 0。只有在下一个时钟采样后才能读取寄存器的分配。"

#: ../../source/SpinalHDL/Introduction/A example.rst:110 simple
msgid "Because of the presence of a register, two implicit signals are added to the component for the clock and the reset. See :ref:`Reg` and :ref:`clock_domain` for more information."
msgstr "由于寄存器的存在，两个隐式信号被添加到用于时钟和复位的组件中。有关更多信息，请参阅 :ref:`Reg` 和 :ref:`clock_domain` 。"

#: ../../source/SpinalHDL/Introduction/A example.rst:114 simple
msgid "Then a conditional rule is described: when the input ``cond0`` (which is in the ``io`` bundle) is set, the ``counter`` is incremented by one, else ``counter`` keeps its value set in the last rule. But, there is no previous rule, you would say. With a simple signal it would be a latch, and trigger an error. But here ``counter`` is a register, so it has a default case: it just keeps the same value."
msgstr "然后描述一个条件规则：当输入“cond0”（位于“io”线束中）被设置时，``counter`` 加一，否则 ``counter`` 保持其值在最后一条规则中设置。但是，您可能会说，没有先前的规则。对一个简单的信号来说，它将成为一个锁存器，并触发一个错误。但这里的 ``counter`` 是一个寄存器，所以它有一个默认情况：它只保持相同的值。"

#: ../../source/SpinalHDL/Introduction/A example.rst:121 simple
msgid "This creates a multiplexer: the input of the ``counter`` register can be its output or its output plus one depending on ``io.cond0``."
msgstr "这里创建了一个多路复用器： ``counter`` 寄存器的输入可以是其输出或其输出加一，具体取决于 ``io.cond0`` 的值。"

#: ../../source/SpinalHDL/Introduction/A example.rst:124 simple
msgid "Then unconditional rules (assignments) are described:"
msgstr "这里描述了无条件规则（赋值）："

#: ../../source/SpinalHDL/Introduction/A example.rst:126 simple
msgid "The output ``state`` is connected to the output of the register ``counter``."
msgstr "输出 ``state`` 连接到寄存器 ``counter`` 的输出。"

#: ../../source/SpinalHDL/Introduction/A example.rst:127 simple
msgid "The output ``flag`` is the output of an ``or`` gate between a signal which is true when the output of \"``counter`` equals 0\", and the input ``cond1``."
msgstr "输出 ``flag`` 是真值与输入信号 ``cond1`` 之间的 ``or`` 门的输出，当 ``counter`` 的输出等于0时该信号为真。"

#: ../../source/SpinalHDL/Introduction/A example.rst:132 simple
msgid "See :ref:`semantics` for more information."
msgstr "有关更多信息，请参阅 :ref:`semantics` 。"

