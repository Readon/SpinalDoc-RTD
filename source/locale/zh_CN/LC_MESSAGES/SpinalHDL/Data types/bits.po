
msgid ""
msgstr ""
"Project-Id-Version:SpinalHDL"
"Report-Msgid-Bugs-To:"
"POT-Creation-Date:2023-12-01 11:48+0800"
"PO-Revision-Date:YEAR-MO-DA HO:MI+ZONE"
"Last-Translator:FULL NAME <EMAIL@ADDRESS>"
"Language:zh_CN"
"Language-Team:zh_CN <LL@li.org>"
"Plural-Forms:nplurals=1; plural=0;"
"MIME-Version:1.0"
"Content-Type:text/plain; charset=utf-8"
"Content-Transfer-Encoding:8bit"
"Generated-By:Babel 2.13.1"

#: ../../source/SpinalHDL/Data types/bits.rst:4 types/bits.rst:25
#: types/bits.rst:28 types/bits.rst:32 types/bits.rst:35 types/bits.rst:38
msgid "Bits"
msgstr "位"
#: ../../source/SpinalHDL/Data types/bits.rst:7 types/bits.rst:21
#: types/bits.rst:72 types/bits.rst:160 types/bits.rst:185 types/bits.rst:225
#: types/bits.rst:270
msgid "Description"
msgstr "描述"
#: ../../source/SpinalHDL/Data types/bits.rst:9
msgid ""
"The ``Bits`` type corresponds to a vector of bits that does not convey any "
"arithmetic meaning."
msgstr "“Bits”类型对应于不传达任何算术含义的位向量。"
#: ../../source/SpinalHDL/Data types/bits.rst:12
msgid "Declaration"
msgstr "宣言"
#: ../../source/SpinalHDL/Data types/bits.rst:14
msgid ""
"The syntax to declare a bit vector is as follows: (everything between [] is "
"optional)"
msgstr "声明位向量的语法如下：（[]之间的所有内容都是可选的）"
#: ../../source/SpinalHDL/Data types/bits.rst:20
msgid "Syntax"
msgstr "句法"
#: ../../source/SpinalHDL/Data types/bits.rst:22 types/bits.rst:186
#: types/bits.rst:226 types/bits.rst:271
msgid "Return"
msgstr "返回"
#: ../../source/SpinalHDL/Data types/bits.rst:23
msgid "Bits [()]"
msgstr "位[()]"
#: ../../source/SpinalHDL/Data types/bits.rst:24
msgid "Create a BitVector, bits count is inferred"
msgstr "创建一个 BitVector，推断位数"
#: ../../source/SpinalHDL/Data types/bits.rst:26 types/bits.rst:307
msgid "Bits(x bits)"
msgstr "位数（x 位）"
#: ../../source/SpinalHDL/Data types/bits.rst:27
msgid "Create a BitVector with x bits"
msgstr "创建一个具有 x 位的 BitVector"
#: ../../source/SpinalHDL/Data types/bits.rst
msgid "B(value: Int[, x bits])"
msgstr "B(值: Int[, x 位])"
#: ../../source/SpinalHDL/Data types/bits.rst
msgid "B(value: BigInt[, x bits])"
msgstr "B(值: BigInt[, x 位])"
#: ../../source/SpinalHDL/Data types/bits.rst:31
msgid "Create a BitVector with x bits assigned with 'value'"
msgstr "创建一个 BitVector，其中 x 位分配有“value”"
#: ../../source/SpinalHDL/Data types/bits.rst:33
msgid "B\"[[size']base]value\""
msgstr "B\"[[size']base]值\""
#: ../../source/SpinalHDL/Data types/bits.rst:34
msgid "Create a BitVector assigned with 'value' (Base: 'h', 'd', 'o', 'b')"
msgstr "创建一个分配有“value”的 BitVector（基数：“h”、“d”、“o”、“b”）"
#: ../../source/SpinalHDL/Data types/bits.rst:36
msgid "B([x bits,] :ref:`element <element>`\\ , ...)"
msgstr "B([x 位,] :ref:`element <element>`\\ , ...)"
#: ../../source/SpinalHDL/Data types/bits.rst:37
msgid "Create a BitVector assigned with the value specified by elements"
msgstr "创建一个 BitVector，分配元素指定的值"
#: ../../source/SpinalHDL/Data types/bits.rst:60
msgid "Operators"
msgstr "运营商"
#: ../../source/SpinalHDL/Data types/bits.rst:62
msgid "The following operators are available for the ``Bits`` type:"
msgstr "以下运算符可用于“Bits”类型："
#: ../../source/SpinalHDL/Data types/bits.rst:65
msgid "Logic"
msgstr "逻辑"
#: ../../source/SpinalHDL/Data types/bits.rst:71 types/bits.rst:159
#: types/bits.rst:184 types/bits.rst:224 types/bits.rst:269
msgid "Operator"
msgstr "操作员"
#: ../../source/SpinalHDL/Data types/bits.rst:73 types/bits.rst:161
msgid "Return type"
msgstr "返回类型"
#: ../../source/SpinalHDL/Data types/bits.rst:74
msgid "~x"
msgstr "〜x"
#: ../../source/SpinalHDL/Data types/bits.rst:75
msgid "Bitwise NOT"
msgstr "按位非"
#: ../../source/SpinalHDL/Data types/bits.rst:76 types/bits.rst:100
#: types/bits.rst:109 types/bits.rst:112 types/bits.rst:115 types/bits.rst:118
#: types/bits.rst:189 types/bits.rst:201 types/bits.rst:304
msgid "Bits(w(x) bits)"
msgstr "位（w(x) 位）"
#: ../../source/SpinalHDL/Data types/bits.rst:77
msgid "x & y"
msgstr "坐标"
#: ../../source/SpinalHDL/Data types/bits.rst:78
msgid "Bitwise AND"
msgstr "按位与"
#: ../../source/SpinalHDL/Data types/bits.rst:79 types/bits.rst:82
#: types/bits.rst:85
msgid "Bits(w(xy) bits)"
msgstr "位（w(xy) 位）"
#: ../../source/SpinalHDL/Data types/bits.rst:80
msgid "x | y"
msgstr "x| y"
#: ../../source/SpinalHDL/Data types/bits.rst:81
msgid "Bitwise OR"
msgstr "按位或"
#: ../../source/SpinalHDL/Data types/bits.rst:83
msgid "x ^ y"
msgstr "x^y"
#: ../../source/SpinalHDL/Data types/bits.rst:84
msgid "Bitwise XOR"
msgstr "按位异或"
#: ../../source/SpinalHDL/Data types/bits.rst:86
msgid "x.xorR"
msgstr "异或R"
#: ../../source/SpinalHDL/Data types/bits.rst:87
msgid "XOR all bits of x"
msgstr "对 x 的所有位进行异或"
#: ../../source/SpinalHDL/Data types/bits.rst:88 types/bits.rst:91
#: types/bits.rst:94 types/bits.rst:164 types/bits.rst:167 types/bits.rst:229
#: types/bits.rst:238 types/bits.rst:286 types/bits.rst:289
msgid "Bool"
msgstr "布尔"
#: ../../source/SpinalHDL/Data types/bits.rst:89
msgid "x.orR"
msgstr "x或R"
#: ../../source/SpinalHDL/Data types/bits.rst:90
msgid "OR all bits of x"
msgstr "或 x 的所有位"
#: ../../source/SpinalHDL/Data types/bits.rst:92
msgid "x.andR"
msgstr "x和R"
#: ../../source/SpinalHDL/Data types/bits.rst:93
msgid "AND all bits of x"
msgstr "AND x 的所有位"
#: ../../source/SpinalHDL/Data types/bits.rst:95 types/bits.rst:98
msgid "x \\>\\> y"
msgstr "x \\>\\> y"
#: ../../source/SpinalHDL/Data types/bits.rst:96
msgid "Logical shift right, y: Int"
msgstr "逻辑右移，y：Int"
#: ../../source/SpinalHDL/Data types/bits.rst:97
msgid "Bits(w(x) - y bits)"
msgstr "位（w(x) - y 位）"
#: ../../source/SpinalHDL/Data types/bits.rst:99
msgid "Logical shift right, y: UInt"
msgstr "逻辑右移，y：UInt"
#: ../../source/SpinalHDL/Data types/bits.rst:101 types/bits.rst:104
msgid "x \\<\\< y"
msgstr "x \\<\\< y"
#: ../../source/SpinalHDL/Data types/bits.rst:102
msgid "Logical shift left, y: Int"
msgstr "逻辑左移，y：Int"
#: ../../source/SpinalHDL/Data types/bits.rst:103
msgid "Bits(w(x) + y bits)"
msgstr "位（w(x) + y 位）"
#: ../../source/SpinalHDL/Data types/bits.rst:105
msgid "Logical shift left, y: UInt"
msgstr "逻辑左移，y：UInt"
#: ../../source/SpinalHDL/Data types/bits.rst:106
msgid "Bits(w(x) + max(y) bits)"
msgstr "位（w(x) + max(y) 位）"
#: ../../source/SpinalHDL/Data types/bits.rst:107
msgid "x \\|\\>\\> y"
msgstr "x \\|\\>\\> y"
#: ../../source/SpinalHDL/Data types/bits.rst:108
msgid "Logical shift right, y: Int/UInt"
msgstr "逻辑右移，y：Int/UInt"
#: ../../source/SpinalHDL/Data types/bits.rst:110
msgid "x \\|\\<\\< y"
msgstr "x \\|\\<\\< y"
#: ../../source/SpinalHDL/Data types/bits.rst:111
msgid "Logical shift left, y: Int/UInt"
msgstr "逻辑左移，y：Int/UInt"
#: ../../source/SpinalHDL/Data types/bits.rst:113
msgid "x.rotateLeft(y)"
msgstr "x.向左旋转(y)"
#: ../../source/SpinalHDL/Data types/bits.rst:114
msgid "Logical left rotation, y: UInt/Int"
msgstr "逻辑左旋转，y：UInt/Int"
#: ../../source/SpinalHDL/Data types/bits.rst:116
msgid "x.rotateRight(y)"
msgstr "x.向右旋转(y)"
#: ../../source/SpinalHDL/Data types/bits.rst:117
msgid "Logical right rotation, y: UInt/Int"
msgstr "逻辑右旋转，y：UInt/Int"
#: ../../source/SpinalHDL/Data types/bits.rst:119
msgid "x.clearAll[()]"
msgstr "x.clearAll[()]"
#: ../../source/SpinalHDL/Data types/bits.rst:120
msgid "Clear all bits"
msgstr "清除所有位"
#: ../../source/SpinalHDL/Data types/bits.rst:122
msgid "x.setAll[()]"
msgstr "x.setAll[()]"
#: ../../source/SpinalHDL/Data types/bits.rst:123
msgid "Set all bits"
msgstr "设置所有位"
#: ../../source/SpinalHDL/Data types/bits.rst:125
msgid "x.setAllTo(value: Boolean)"
msgstr "x.setAllTo(值：布尔值)"
#: ../../source/SpinalHDL/Data types/bits.rst:126
msgid "Set all bits to the given Boolean value"
msgstr "将所有位设置为给定的布尔值"
#: ../../source/SpinalHDL/Data types/bits.rst:128
msgid "x.setAllTo(value: Bool)"
msgstr "x.setAllTo(值: Bool)"
#: ../../source/SpinalHDL/Data types/bits.rst:129
msgid "Set all bits to the given Bool value"
msgstr "将所有位设置为给定的布尔值"
#: ../../source/SpinalHDL/Data types/bits.rst:154
msgid "Comparison"
msgstr "比较"
#: ../../source/SpinalHDL/Data types/bits.rst:162
msgid "x === y"
msgstr "x === y"
#: ../../source/SpinalHDL/Data types/bits.rst:163
msgid "Equality"
msgstr "平等"
#: ../../source/SpinalHDL/Data types/bits.rst:165
msgid "x =/= y"
msgstr "x =/= y"
#: ../../source/SpinalHDL/Data types/bits.rst:166
msgid "Inequality"
msgstr "不等式"
#: ../../source/SpinalHDL/Data types/bits.rst:179
msgid "Type cast"
msgstr "类型转换"
#: ../../source/SpinalHDL/Data types/bits.rst:187
msgid "x.asBits"
msgstr "x.asBits"
#: ../../source/SpinalHDL/Data types/bits.rst:188
msgid "Binary cast to Bits"
msgstr "二进制转换为 Bits"
#: ../../source/SpinalHDL/Data types/bits.rst:190
msgid "x.asUInt"
msgstr "x.asUIt"
#: ../../source/SpinalHDL/Data types/bits.rst:191
msgid "Binary cast to UInt"
msgstr "二进制转换为 UInt"
#: ../../source/SpinalHDL/Data types/bits.rst:192
msgid "UInt(w(x) bits)"
msgstr "UInt(w(x) 位)"
#: ../../source/SpinalHDL/Data types/bits.rst:193
msgid "x.asSInt"
msgstr "x.asSInt"
#: ../../source/SpinalHDL/Data types/bits.rst:194
msgid "Binary cast to SInt"
msgstr "二进制转换为 SInt"
#: ../../source/SpinalHDL/Data types/bits.rst:195
msgid "SInt(w(x) bits)"
msgstr "SInt(w(x) 位)"
#: ../../source/SpinalHDL/Data types/bits.rst:196
msgid "x.asBools"
msgstr "x.asBools"
#: ../../source/SpinalHDL/Data types/bits.rst:197
msgid "Cast to an array of Bools"
msgstr "转换为布尔数组"
#: ../../source/SpinalHDL/Data types/bits.rst:198
msgid "Vec(Bool(), w(x))"
msgstr "Vec(布尔(), w(x))"
#: ../../source/SpinalHDL/Data types/bits.rst:199
msgid "B(x: T)"
msgstr "B(x:T)"
#: ../../source/SpinalHDL/Data types/bits.rst:200
msgid "Cast Data to Bits"
msgstr "将数据转换为位"
#: ../../source/SpinalHDL/Data types/bits.rst:204
msgid ""
"To cast a ``Bool``, ``UInt`` or an ``SInt`` into a ``Bits``, you can use "
"``B(something)``:"
msgstr "要将“Bool”、“UInt”或“SInt”转换为“Bits”，可以使用“B(something)”："
#: ../../source/SpinalHDL/Data types/bits.rst:218
msgid "Bit extraction"
msgstr "位提取"
#: ../../source/SpinalHDL/Data types/bits.rst:227
msgid "x(y)"
msgstr "x(y)"
#: ../../source/SpinalHDL/Data types/bits.rst:228
msgid "Readbit, y: Int/UInt"
msgstr "读取位，y：Int/UInt"
#: ../../source/SpinalHDL/Data types/bits.rst:230
msgid "x(offset,width bits)"
msgstr "x(偏移量,宽度位)"
#: ../../source/SpinalHDL/Data types/bits.rst:231
msgid "Read bitfield, offset: UInt, width: Int"
msgstr "读取位域，偏移量：UInt，宽度：Int"
#: ../../source/SpinalHDL/Data types/bits.rst:232 types/bits.rst:241
msgid "Bits(width bits)"
msgstr "位（宽度位）"
#: ../../source/SpinalHDL/Data types/bits.rst:233
msgid "x(\\ :ref:`range <range>`\\ )"
msgstr "x(\\ :ref:`范围 <范围>`\\ )"
#: ../../source/SpinalHDL/Data types/bits.rst:234
msgid "Read a range of bit. Ex : myBits(4 downto 2)"
msgstr "读取一个位范围。例如：myBits(4 降到 2)"
#: ../../source/SpinalHDL/Data types/bits.rst:235 types/bits.rst:244
msgid "Bits(range bits)"
msgstr "位（范围位）"
#: ../../source/SpinalHDL/Data types/bits.rst:236
msgid "x(y) := z"
msgstr "x(y) := z"
#: ../../source/SpinalHDL/Data types/bits.rst:237
msgid "Assign bits, y: Int/UInt"
msgstr "分配位，y：Int/UInt"
#: ../../source/SpinalHDL/Data types/bits.rst:239
msgid "x(offset, width bits) := z"
msgstr "x(偏移量，宽度位) := z"
#: ../../source/SpinalHDL/Data types/bits.rst:240
msgid "Assign bitfield, offset: UInt, width: Int"
msgstr "分配位域，偏移量：UInt，宽度：Int"
#: ../../source/SpinalHDL/Data types/bits.rst:242
msgid "x(\\ :ref:`range <range>`\\ ) := z"
msgstr "x(\\ :ref:`范围 <范围>`\\ ) := z"
#: ../../source/SpinalHDL/Data types/bits.rst:243
msgid "Assign a range of bit. Ex : myBits(4 downto 2) := B\"010\""
msgstr "指定一个位范围。例如：myBits(4 downto 2) := B\"010\""
#: ../../source/SpinalHDL/Data types/bits.rst:263
msgid "Misc"
msgstr "杂项"
#: ../../source/SpinalHDL/Data types/bits.rst:272
msgid "x.getWidth"
msgstr "x.getWidth"
#: ../../source/SpinalHDL/Data types/bits.rst:273
msgid "Return bitcount"
msgstr "返回位数"
#: ../../source/SpinalHDL/Data types/bits.rst:274 types/bits.rst:283
msgid "Int"
msgstr "INT"
#: ../../source/SpinalHDL/Data types/bits.rst:275
msgid "x.bitsRange"
msgstr "x.bitsRange"
#: ../../source/SpinalHDL/Data types/bits.rst:276
msgid "Return the range (0 to x.high)"
msgstr "返回范围（0 到 x.high）"
#: ../../source/SpinalHDL/Data types/bits.rst:277 types/bits.rst:280
msgid "Range"
msgstr "范围"
#: ../../source/SpinalHDL/Data types/bits.rst:278
msgid "x.valueRange"
msgstr "x.valueRange"
#: ../../source/SpinalHDL/Data types/bits.rst:279
msgid ""
"Return the range of minimum to maximum x values, interpreted as an unsigned "
"integer (0 to 2 \\*\\* width - 1)."
msgstr "返回最小到最大 x 值的范围，解释为无符号整数（0 到 2 \\*\\* 宽度 - 1）。"
#: ../../source/SpinalHDL/Data types/bits.rst:281
msgid "x.high"
msgstr "x.高"
#: ../../source/SpinalHDL/Data types/bits.rst:282
msgid "Return the index of the MSB (highest allowed index for Bits)"
msgstr "返回 MSB 的索引（位允许的最高索引）"
#: ../../source/SpinalHDL/Data types/bits.rst:284
msgid "x.msb"
msgstr "x.msb"
#: ../../source/SpinalHDL/Data types/bits.rst:285
msgid "Return the most significant bit"
msgstr "返回最高有效位"
#: ../../source/SpinalHDL/Data types/bits.rst:287
msgid "x.lsb"
msgstr "x.lsb"
#: ../../source/SpinalHDL/Data types/bits.rst:288
msgid "Return the least significant bit"
msgstr "返回最低有效位"
#: ../../source/SpinalHDL/Data types/bits.rst:290
msgid "x ## y"
msgstr "x##y"
#: ../../source/SpinalHDL/Data types/bits.rst:291
msgid "Concatenate, x->high, y->low"
msgstr "连接，x->高，y->低"
#: ../../source/SpinalHDL/Data types/bits.rst:292
msgid "Bits(w(x) + w(y) bits)"
msgstr "位（w(x) + w(y) 位）"
#: ../../source/SpinalHDL/Data types/bits.rst:293
msgid "x.subdivideIn(y slices)"
msgstr "x.subdivideIn(y 切片)"
#: ../../source/SpinalHDL/Data types/bits.rst:294
msgid "Subdivide x in y slices, y: Int"
msgstr "将 x 细分为 y 片，y: Int"
#: ../../source/SpinalHDL/Data types/bits.rst:295
msgid "Vec(Bits, y)"
msgstr "Vec(位, y)"
#: ../../source/SpinalHDL/Data types/bits.rst:296
msgid "x.subdivideIn(y bits)"
msgstr "x.subdivideIn(y 位)"
#: ../../source/SpinalHDL/Data types/bits.rst:297
msgid "Subdivide x in multiple slices of y bits, y: Int"
msgstr "将 x 细分为 y 位的多个切片，y: Int"
#: ../../source/SpinalHDL/Data types/bits.rst:298
msgid "Vec(Bits, w(x)/y)"
msgstr "Vec(位，w(x)/y)"
#: ../../source/SpinalHDL/Data types/bits.rst:299
msgid "x.resize(y)"
msgstr "x.调整大小(y)"
#: ../../source/SpinalHDL/Data types/bits.rst:300
msgid ""
"Return a resized copy of x, if enlarged, it is filled with zero, y: Int"
msgstr "返回x的调整大小的副本，如果放大，则用零填充，y：Int"
#: ../../source/SpinalHDL/Data types/bits.rst:301
msgid "Bits(y bits)"
msgstr "比特(y比特)"
#: ../../source/SpinalHDL/Data types/bits.rst:302
msgid "x.resized"
msgstr "x.调整大小"
#: ../../source/SpinalHDL/Data types/bits.rst:303
msgid ""
"Return a version of x which is allowed to be automatically resized were "
"needed"
msgstr "返回一个允许自动调整大小的 x 版本"
#: ../../source/SpinalHDL/Data types/bits.rst:305
msgid "x.resizeLeft(x)"
msgstr "x.resizeLeft(x)"
#: ../../source/SpinalHDL/Data types/bits.rst:306
msgid "Resize by keeping MSB at the same place, x:Int"
msgstr "通过将 MSB 保持在同一位置 x:Int 来调整大小"
#: ../../source/SpinalHDL/Data types/bits.rst:310
msgid ""
"`validRange` can only be used for types where the minimum and maximum values"
" fit into a signed 32-bit integer. (This is a limitation given by the Scala "
"range type which uses `Int`)"
msgstr "`validRange` 只能用于最小值和最大值适合有符号 32 位整数的类型。 （这是使用“Int”的 Scala 范围类型给出的限制）"
#: ../../source/SpinalHDL/Data types/bits.rst:343
msgid "MaskedLiteral"
msgstr "蒙面文字"
#: ../../source/SpinalHDL/Data types/bits.rst:345
msgid ""
"MaskedLiteral values are bit vectors with don’t care values denoted with "
"`-`."
msgstr "MaskedLiteral 值是位向量，不关心值用“-”表示。"
